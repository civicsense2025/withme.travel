#!/usr/bin/env node

/**
 * Development Performance Optimization Script
 *
 * This script helps improve Next.js development build performance by:
 * 1. Temporarily disabling TypeScript type checking during development
 * 2. Optimizing the Next.js cache settings
 * 3. Setting up environment variables for faster builds
 *
 * Usage:
 *   node scripts/optimize-dev.js
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

// Get current file path for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ANSI color codes for console output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

function log(message, color = colors.white) {
  console.log(`${color}${message}${colors.reset}`);
}

function success(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function warning(message) {
  log(`‚ö†Ô∏è ${message}`, colors.yellow);
}

function error(message) {
  log(`‚ùå ${message}`, colors.red);
  process.exit(1);
}

function heading(message) {
  log(`\n${colors.cyan}${message}${colors.reset}`);
  log(`${colors.cyan}${'='.repeat(message.length)}${colors.reset}\n`);
}

// Check if we're in the project root
function checkProjectRoot() {
  const packagePath = path.join(process.cwd(), 'package.json');

  if (!fs.existsSync(packagePath)) {
    error('This script must be run from the project root directory.');
  }

  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    if (!packageJson.name.includes('withme.travel')) {
      warning(
        'This script is designed for withme.travel. Running on a different project may have unexpected results.'
      );
    }
  } catch (err) {
    warning('Could not verify project identity from package.json.');
  }
}

// Optimize tsconfig.json for development
function optimizeTsConfig() {
  heading('Optimizing TypeScript Configuration');

  const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');

  if (!fs.existsSync(tsconfigPath)) {
    warning('tsconfig.json not found. Skipping TypeScript optimization.');
    return;
  }

  try {
    // Create backup if it doesn't exist
    const backupPath = path.join(process.cwd(), 'tsconfig.json.bak');
    if (!fs.existsSync(backupPath)) {
      fs.copyFileSync(tsconfigPath, backupPath);
      success('Created backup of tsconfig.json at tsconfig.json.bak');
    }

    // Read the tsconfig.json file
    const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));

    // Modify compiler options for faster development
    tsconfig.compilerOptions = {
      ...tsconfig.compilerOptions,
      skipLibCheck: true,
      incremental: true,
    };

    // Add dev-specific settings if they're not already present
    if (!tsconfig.watchOptions) {
      tsconfig.watchOptions = {
        watchFile: 'useFsEvents',
        watchDirectory: 'useFsEvents',
        fallbackPolling: 'dynamicPriority',
        synchronousWatchDirectory: true,
        excludeDirectories: ['**/node_modules', '**/.next'],
      };
    }

    // Write the modified tsconfig back
    fs.writeFileSync(tsconfigPath, JSON.stringify(tsconfig, null, 2));
    success('Optimized tsconfig.json for development');
  } catch (err) {
    warning(`Error modifying tsconfig.json: ${err.message}`);
  }
}

// Create a .env.development.local file with performance optimizations
function setupEnvironmentVariables() {
  heading('Setting Up Performance-Optimized Environment Variables');

  const envPath = path.join(process.cwd(), '.env.development.local');
  const envContent = `
# Performance optimization settings for development
# Generated by optimize-dev.js

# TypeScript type checking in development
NEXT_TYPESCRIPT_CHECK=0

# Disable source maps to improve build speed
GENERATE_SOURCEMAP=false

# SWC optimization settings
NEXT_SWC_MINIFY=false
NEXT_SWC_PRESET_ENV=false

# Cache optimization
USE_WEBPACK_DEV_SERVER_CACHE=true
`.trim();

  try {
    // Back up existing file if it exists
    if (fs.existsSync(envPath)) {
      const backupPath = path.join(process.cwd(), '.env.development.local.bak');
      fs.copyFileSync(envPath, backupPath);
      success('Backed up existing .env.development.local');
    }

    // Write new optimized env file
    fs.writeFileSync(envPath, envContent);
    success('Created optimized .env.development.local');
  } catch (err) {
    warning(`Error setting up environment variables: ${err.message}`);
  }
}

// Create an optimized next.config.mjs for development
function optimizeNextConfig() {
  heading('Optimizing Next.js Configuration');

  const nextConfigPath = path.join(process.cwd(), 'next.config.mjs');

  if (!fs.existsSync(nextConfigPath)) {
    warning('next.config.mjs not found. Skipping Next.js configuration optimization.');
    return;
  }

  try {
    // Create backup if it doesn't exist
    const backupPath = path.join(process.cwd(), 'next.config.mjs.bak');
    if (!fs.existsSync(backupPath)) {
      fs.copyFileSync(nextConfigPath, backupPath);
      success('Created backup of next.config.mjs');
    }

    // Read original config
    let configContent = fs.readFileSync(nextConfigPath, 'utf8');

    // Add development optimization if not already present
    if (!configContent.includes('isDevelopment')) {
      const developmentOptimizations = `
// Development performance optimizations
const isDevelopment = process.env.NODE_ENV === 'development';
if (isDevelopment) {
  console.log('üöÄ Running with development performance optimizations enabled');
}

`;
      // Find the export default statement to insert before it
      const exportDefaultMatch = configContent.match(/export\s+default\s+/);

      if (exportDefaultMatch) {
        const insertPosition = exportDefaultMatch.index;
        configContent =
          configContent.slice(0, insertPosition) +
          developmentOptimizations +
          configContent.slice(insertPosition);
      } else {
        // If we can't find export default, just append to the end
        configContent += `\n${developmentOptimizations}`;
      }
    }

    // Modify the configuration to include performance optimizations
    if (!configContent.includes('if (isDevelopment)')) {
      // Find the configuration object
      const configObjectMatch = configContent.match(/({[\s\S]*})/);

      if (configObjectMatch) {
        const configObjectStr = configObjectMatch[0];
        const optimizedConfig = configObjectStr.replace(
          /{/,
          `{
  // Development performance optimizations
  ...(isDevelopment ? {
    typescript: {
      ignoreBuildErrors: true,
      tsconfigPath: 'tsconfig.json',
    },
    eslint: {
      ignoreDuringBuilds: true,
    },
    swcMinify: false,
    optimizeFonts: false,
    reactStrictMode: false,
  } : {}),`
        );

        configContent = configContent.replace(configObjectStr, optimizedConfig);
      }
    }

    // Write the optimized config back
    fs.writeFileSync(nextConfigPath, configContent);
    success('Optimized next.config.mjs for development');
  } catch (err) {
    warning(`Error optimizing Next.js configuration: ${err.message}`);
  }
}

// Clear Next.js cache for a fresh start
function clearNextCache() {
  heading('Clearing Next.js Cache');

  try {
    const nextCachePath = path.join(process.cwd(), '.next');

    if (fs.existsSync(nextCachePath)) {
      execSync('rm -rf .next/cache');
      success('Cleared Next.js cache');
    } else {
      warning('.next directory not found. No cache to clear.');
    }
  } catch (err) {
    warning(`Error clearing Next.js cache: ${err.message}`);
  }
}

// Create an optimized dev script for package.json
function updateDevScript() {
  heading('Updating Development Script');

  const packagePath = path.join(process.cwd(), 'package.json');

  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

    // Backup first
    const backupPath = path.join(process.cwd(), 'package.json.bak');
    if (!fs.existsSync(backupPath)) {
      fs.writeFileSync(backupPath, JSON.stringify(packageJson, null, 2));
      success('Created backup of package.json');
    }

    // Add fast-dev script if it doesn't exist
    if (!packageJson.scripts['fast-dev']) {
      packageJson.scripts['fast-dev'] =
        'NEXT_WEBPACK_USEPOLLING=1 NODE_OPTIONS=--max-old-space-size=4096 next dev';
      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
      success('Added fast-dev script to package.json');
    } else {
      warning('fast-dev script already exists in package.json');
    }
  } catch (err) {
    warning(`Error updating package.json: ${err.message}`);
  }
}

// Main function
function main() {
  heading('Development Performance Optimization');
  log('This script will optimize your Next.js development environment for faster builds.\n');

  // Run optimizations
  checkProjectRoot();
  optimizeTsConfig();
  setupEnvironmentVariables();
  optimizeNextConfig();
  clearNextCache();
  updateDevScript();

  // Final instructions
  heading('Optimization Complete');
  log('To use the optimized development environment:');
  log('1. Run your development server with:', colors.cyan);
  log('   pnpm run fast-dev', colors.cyan);
  log('\nNote: These optimizations are for development only and should not be used in production.');
  log('To restore original settings:', colors.cyan);
  log('   node scripts/restore-dev.js', colors.cyan);
}

// Run the main function
main();
