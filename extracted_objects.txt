--- CONSTRAINTS ---
constraint on (trip_id
constraint on `(trip_id
constraint violation.'
CONSTRAINT research_participants_id_not_null CHECK ((id IS NOT NULL)) )
CONSTRAINT fk_plan_id FOREIGN KEY (plan_id) REFERENCES public.group_plans(id) ON DELETE CASCADE
CONSTRAINT fk_group_id FOREIGN KEY (group_id) REFERENCES public.groups(id) ON DELETE CASCADE )
constraint on -- (subscription_id
CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0)) )
CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0))
CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0)))
CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0)) )
CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0)) )
CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0)) )
CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0))) )
CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2))) )
CONSTRAINT access_requests_status_check CHECK ((status = ANY (ARRAY['pending'::text
CONSTRAINT valid_trigger_frequency CHECK ((trigger_frequency = ANY (ARRAY['once'::text
CONSTRAINT budget_items_amount_check CHECK ((amount >= (0)::numeric)) )
CONSTRAINT comments_content_type_check CHECK ((content_type = ANY (ARRAY['destination'::text
CONSTRAINT content_quality_metrics_engagement_score_check CHECK (((engagement_score >= (0)::double precision) AND (engagement_score <= (1)::double precision)))
CONSTRAINT content_quality_metrics_popularity_score_check CHECK (((popularity_score >= (0)::double precision) AND (popularity_score <= (1)::double precision)))
CONSTRAINT content_quality_metrics_quality_score_check CHECK (((quality_score >= (0)::double precision) AND (quality_score <= (1)::double precision))) )
CONSTRAINT countries_safety_rating_check CHECK (((safety_rating >= 1) AND (safety_rating <= 5))) )
CONSTRAINT destinations_accessibility_check CHECK (((accessibility >= 1.0) AND (accessibility <= 5.0)))
CONSTRAINT destinations_beach_quality_check CHECK (((beach_quality >= 1.0) AND (beach_quality <= 5.0)))
CONSTRAINT destinations_cuisine_rating_check CHECK (((cuisine_rating >= 1.0) AND (cuisine_rating <= 5.0)))
CONSTRAINT destinations_cultural_attractions_check CHECK (((cultural_attractions >= 1.0) AND (cultural_attractions <= 5.0)))
CONSTRAINT destinations_eco_friendly_options_check CHECK (((eco_friendly_options >= 1.0) AND (eco_friendly_options <= 5.0)))
CONSTRAINT destinations_instagram_worthy_spots_check CHECK (((instagram_worthy_spots >= 1.0) AND (instagram_worthy_spots <= 5.0)))
CONSTRAINT destinations_lgbtq_friendliness_check CHECK (((lgbtq_friendliness >= 1.0) AND (lgbtq_friendliness <= 5.0)))
CONSTRAINT destinations_nightlife_rating_check CHECK (((nightlife_rating >= 1.0) AND (nightlife_rating <= 5.0)))
CONSTRAINT destinations_off_peak_appeal_check CHECK (((off_peak_appeal >= 1.0) AND (off_peak_appeal <= 5.0)))
CONSTRAINT destinations_outdoor_activities_check CHECK (((outdoor_activities >= 1.0) AND (outdoor_activities <= 5.0)))
CONSTRAINT destinations_public_transportation_check CHECK (((public_transportation >= 1.0) AND (public_transportation <= 5.0)))
CONSTRAINT destinations_safety_rating_check CHECK (((safety_rating >= 1.0) AND (safety_rating <= 5.0)))
CONSTRAINT destinations_shopping_rating_check CHECK (((shopping_rating >= 1.0) AND (shopping_rating <= 5.0)))
CONSTRAINT destinations_walkability_check CHECK (((walkability >= 1.0) AND (walkability <= 5.0)))
CONSTRAINT destinations_wifi_connectivity_check CHECK (((wifi_connectivity >= 1.0) AND (wifi_connectivity <= 5.0))) )
CONSTRAINT group_members_role_check CHECK ((role = ANY (ARRAY['owner'::text
CONSTRAINT group_members_status_check CHECK ((status = ANY (ARRAY['invited'::text
CONSTRAINT groups_visibility_check CHECK ((visibility = ANY (ARRAY['private'::text
CONSTRAINT friend_requests_status_check CHECK ((status = ANY (ARRAY['pending'::text
CONSTRAINT group_idea_votes_vote_type_check CHECK ((vote_type = ANY (ARRAY['up'::text
CONSTRAINT trips_cover_image_position_y_check CHECK (((cover_image_position_y >= (0)::numeric) AND (cover_image_position_y <= (100)::numeric)))
CONSTRAINT trips_date_flexibility_check CHECK ((date_flexibility = ANY (ARRAY['fixed'::text
CONSTRAINT trips_name_check CHECK ((char_length(name) > 0))
CONSTRAINT trips_travelers_count_check CHECK ((travelers_count >= 0)) )
CONSTRAINT invitations_type_validation CHECK ((((type = 'trip'::public.invitation_type) AND (trip_id IS NOT NULL)) OR ((type = 'group'::public.invitation_type) AND (group_id IS NOT NULL)) OR (type = 'referral'::public.invitation_type))) )
CONSTRAINT itinerary_item_reactions_emoji_check CHECK ((emoji = ANY (ARRAY['👍'::text
CONSTRAINT itinerary_items_attribution_type_check CHECK ((attribution_type = ANY (ARRAY['original'::text
CONSTRAINT itinerary_items_content_layer_check CHECK ((content_layer = ANY (ARRAY['original'::text
CONSTRAINT itinerary_items_share_status_check CHECK ((share_status = ANY (ARRAY['private'::text
CONSTRAINT itinerary_sections_day_number_check CHECK ((day_number > 0)) )
CONSTRAINT itinerary_template_items_day_check CHECK ((day > 0)) )
CONSTRAINT itinerary_templates_template_type_check CHECK (((template_type)::text = ANY (ARRAY[('official'::character varying)::text
CONSTRAINT notification_analytics_action_check CHECK (((action)::text = ANY ((ARRAY['impression'::character varying
CONSTRAINT preference_weights_weight_check CHECK (((weight >= (0)::double precision) AND (weight <= (1)::double precision))) )
CONSTRAINT research_survey_triggers_completed_status_check CHECK (((((status = 'completed'::text) OR (status = 'dismissed'::text)) AND (completed_at IS NOT NULL)) OR ((status <> 'completed'::text) AND (status <> 'dismissed'::text)))) )
CONSTRAINT reviews_rating_check CHECK (((rating >= 1) AND (rating <= 5))) )
CONSTRAINT trip_logistics_type_check CHECK ((type = ANY (ARRAY['form'::text
CONSTRAINT trip_members_user_or_guest_check CHECK (((user_id IS NOT NULL) OR (guest_token IS NOT NULL))) )
CONSTRAINT user_interests_strength_check CHECK (((strength >= 0) AND (strength <= 10))) )
constraint \\"access_requests_pkey\\" PRIMARY KEY using index \\"access_requests_pkey\\""
constraint \\"albums_pkey\\" PRIMARY KEY using index \\"albums_pkey\\""
constraint \\"budget_items_pkey\\" PRIMARY KEY using index \\"budget_items_pkey\\""
constraint \\"cities_pkey\\" PRIMARY KEY using index \\"cities_pkey\\""
constraint \\"collaborative_notes_pkey\\" PRIMARY KEY using index \\"collaborative_notes_pkey\\""
constraint \\"collaborative_sessions_pkey\\" PRIMARY KEY using index \\"collaborative_sessions_pkey\\""
constraint \\"comment_reactions_pkey\\" PRIMARY KEY using index \\"comment_reactions_pkey\\""
constraint \\"comments_pkey\\" PRIMARY KEY using index \\"comments_pkey\\""
constraint \\"content_customizations_pkey\\" PRIMARY KEY using index \\"content_customizations_pkey\\""
constraint \\"content_quality_metrics_pkey\\" PRIMARY KEY using index \\"content_quality_metrics_pkey\\""
constraint \\"content_sharing_history_pkey\\" PRIMARY KEY using index \\"content_sharing_history_pkey\\""
constraint \\"content_slugs_pkey\\" PRIMARY KEY using index \\"content_slugs_pkey\\""
constraint \\"continents_pkey\\" PRIMARY KEY using index \\"continents_pkey\\""
constraint \\"countries_pkey\\" PRIMARY KEY using index \\"countries_pkey\\""
constraint \\"country_languages_pkey\\" PRIMARY KEY using index \\"country_languages_pkey\\""
constraint \\"currencies_pkey\\" PRIMARY KEY using index \\"currencies_pkey\\""
constraint \\"destination_tags_pkey\\" PRIMARY KEY using index \\"destination_tags_pkey\\""
constraint \\"destinations_pkey\\" PRIMARY KEY using index \\"destinations_pkey\\""
constraint \\"expenses_pkey\\" PRIMARY KEY using index \\"expenses_pkey\\""
constraint \\"focus_sessions_pkey\\" PRIMARY KEY using index \\"focus_sessions_pkey\\""
constraint \\"form_collaborators_pkey\\" PRIMARY KEY using index \\"form_collaborators_pkey\\""
constraint \\"form_templates_pkey\\" PRIMARY KEY using index \\"form_templates_pkey\\""
constraint \\"forms_pkey\\" PRIMARY KEY using index \\"forms_pkey\\""
constraint \\"group_activities_pkey\\" PRIMARY KEY using index \\"group_activities_pkey\\""
constraint \\"group_board_log_pkey\\" PRIMARY KEY using index \\"group_board_log_pkey\\""
constraint \\"group_guest_members_pkey\\" PRIMARY KEY using index \\"group_guest_members_pkey\\""
constraint \\"group_members_pkey\\" PRIMARY KEY using index \\"group_members_pkey\\""
constraint \\"group_idea_comments_pkey\\" PRIMARY KEY using index \\"group_idea_comments_pkey\\""
constraint \\"group_idea_reactions_pkey\\" PRIMARY KEY using index \\"group_idea_reactions_pkey\\""
constraint \\"group_idea_votes_pkey\\" PRIMARY KEY using index \\"group_idea_votes_pkey\\""
constraint \\"group_ideas_pkey\\" PRIMARY KEY using index \\"group_ideas_pkey\\""
constraint \\"group_idea_plans_pkey\\" PRIMARY KEY using index \\"group_idea_plans_pkey\\""
constraint \\"group_plans_log_pkey\\" PRIMARY KEY using index \\"group_plans_log_pkey\\""
constraint \\"group_roles_pkey\\" PRIMARY KEY using index \\"group_roles_pkey\\""
constraint \\"group_trips_pkey\\" PRIMARY KEY using index \\"group_trips_pkey\\""
constraint \\"groups_pkey\\" PRIMARY KEY using index \\"groups_pkey\\""
constraint \\"image_metadata_pkey\\" PRIMARY KEY using index \\"image_metadata_pkey\\""
constraint \\"invitations_pkey\\" PRIMARY KEY using index \\"invitations_pkey\\""
constraint \\"item_popularity_metrics_pkey\\" PRIMARY KEY using index \\"item_popularity_metrics_pkey\\""
constraint \\"itinerary_item_comments_pkey\\" PRIMARY KEY using index \\"itinerary_item_comments_pkey\\""
constraint \\"itinerary_item_reactions_pkey\\" PRIMARY KEY using index \\"itinerary_item_reactions_pkey\\""
constraint \\"itinerary_item_votes_pkey\\" PRIMARY KEY using index \\"itinerary_item_votes_pkey\\""
constraint \\"itinerary_items_pkey\\" PRIMARY KEY using index \\"itinerary_items_pkey\\""
constraint \\"itinerary_sections_pkey\\" PRIMARY KEY using index \\"itinerary_sections_pkey\\""
constraint \\"itinerary_template_items_pkey\\" PRIMARY KEY using index \\"itinerary_template_items_pkey\\""
constraint \\"itinerary_template_sections_pkey\\" PRIMARY KEY using index \\"itinerary_template_sections_pkey\\""
constraint \\"itinerary_templates_pkey\\" PRIMARY KEY using index \\"itinerary_templates_pkey\\""
constraint \\"languages_pkey\\" PRIMARY KEY using index \\"languages_pkey\\""
constraint \\"likes_pkey\\" PRIMARY KEY using index \\"likes_pkey\\""
constraint \\"locations_pkey\\" PRIMARY KEY using index \\"locations_pkey\\""
constraint \\"note_tags_pkey\\" PRIMARY KEY using index \\"note_tags_pkey\\""
constraint \\"notification_preferences_pkey\\" PRIMARY KEY using index \\"notification_preferences_pkey\\""
constraint \\"notifications_pkey\\" PRIMARY KEY using index \\"notifications_pkey\\""
constraint \\"onboarding_events_pkey\\" PRIMARY KEY using index \\"onboarding_events_pkey\\""
constraint \\"onboarding_preferences_pkey\\" PRIMARY KEY using index \\"onboarding_preferences_pkey\\""
constraint \\"onboarding_tour_completions_pkey\\" PRIMARY KEY using index \\"onboarding_tour_completions_pkey\\""
constraint \\"permission_requests_pkey\\" PRIMARY KEY using index \\"permission_requests_pkey\\""
constraint \\"place_metrics_pkey\\" PRIMARY KEY using index \\"place_metrics_pkey\\""
constraint \\"place_nominations_pkey\\" PRIMARY KEY using index \\"place_nominations_pkey\\""
constraint \\"preference_weights_pkey\\" PRIMARY KEY using index \\"preference_weights_pkey\\""
constraint \\"profiles_pkey\\" PRIMARY KEY using index \\"profiles_pkey\\""
constraint \\"question_branching_pkey\\" PRIMARY KEY using index \\"question_branching_pkey\\""
constraint \\"questions_pkey\\" PRIMARY KEY using index \\"questions_pkey\\""
constraint \\"rate_limits_pkey\\" PRIMARY KEY using index \\"rate_limits_pkey\\""
constraint \\"referrals_pkey\\" PRIMARY KEY using index \\"referrals_pkey\\""
constraint \\"response_sessions_pkey\\" PRIMARY KEY using index \\"response_sessions_pkey\\""
constraint \\"responses_pkey\\" PRIMARY KEY using index \\"responses_pkey\\""
constraint \\"reviews_pkey\\" PRIMARY KEY using index \\"reviews_pkey\\""
constraint \\"states_provinces_pkey\\" PRIMARY KEY using index \\"states_provinces_pkey\\""
constraint \\"survey_definitions_pkey\\" PRIMARY KEY using index \\"survey_definitions_pkey\\""
constraint \\"survey_responses_pkey\\" PRIMARY KEY using index \\"survey_responses_pkey\\""
constraint \\"tags_pkey\\" PRIMARY KEY using index \\"tags_pkey\\""
constraint \\"template_applications_pkey\\" PRIMARY KEY using index \\"template_applications_pkey\\""
constraint \\"trip_analytics_events_pkey\\" PRIMARY KEY using index \\"trip_analytics_events_pkey\\""
constraint \\"trip_comment_likes_pkey\\" PRIMARY KEY using index \\"trip_comment_likes_pkey\\""
constraint \\"trip_history_pkey\\" PRIMARY KEY using index \\"trip_history_pkey\\""
constraint \\"trip_images_pkey\\" PRIMARY KEY using index \\"trip_images_pkey\\""
constraint \\"trip_item_comments_pkey\\" PRIMARY KEY using index \\"trip_item_comments_pkey\\""
constraint \\"trip_logistics_pkey\\" PRIMARY KEY using index \\"trip_logistics_pkey\\""
constraint \\"trip_members_pkey\\" PRIMARY KEY using index \\"trip_members_pkey\\""
constraint \\"trip_notes_pkey\\" PRIMARY KEY using index \\"trip_notes_pkey\\""
constraint \\"trip_tags_pkey\\" PRIMARY KEY using index \\"trip_tags_pkey\\""
constraint \\"trip_template_uses_pkey\\" PRIMARY KEY using index \\"trip_template_uses_pkey\\""
constraint \\"trip_vote_options_pkey\\" PRIMARY KEY using index \\"trip_vote_options_pkey\\""
constraint \\"trip_vote_polls_pkey\\" PRIMARY KEY using index \\"trip_vote_polls_pkey\\""
constraint \\"trip_votes_pkey\\" PRIMARY KEY using index \\"trip_votes_pkey\\""
constraint \\"trips_pkey\\" PRIMARY KEY using index \\"trips_pkey\\""
constraint \\"user_activity_history_pkey\\" PRIMARY KEY using index \\"user_activity_history_pkey\\""
constraint \\"user_events_pkey\\" PRIMARY KEY using index \\"user_events_pkey\\""
constraint \\"user_interactions_pkey\\" PRIMARY KEY using index \\"user_interactions_pkey\\""
constraint \\"user_interests_pkey\\" PRIMARY KEY using index \\"user_interests_pkey\\""
constraint \\"user_login_history_pkey\\" PRIMARY KEY using index \\"user_login_history_pkey\\""
constraint \\"user_preferences_pkey\\" PRIMARY KEY using index \\"user_preferences_pkey\\""
constraint \\"user_presence_pkey\\" PRIMARY KEY using index \\"user_presence_pkey\\""
constraint \\"user_suggested_tags_pkey\\" PRIMARY KEY using index \\"user_suggested_tags_pkey\\""
constraint \\"user_testing_signups_pkey\\" PRIMARY KEY using index \\"user_testing_signups_pkey\\""
constraint \\"user_travel_pkey\\" PRIMARY KEY using index \\"user_travel_pkey\\""
constraint \\"validation_logs_pkey\\" PRIMARY KEY using index \\"validation_logs_pkey\\""
constraint \\"votes_pkey\\" PRIMARY KEY using index \\"votes_pkey\\""
constraint \\"access_requests_approved_by_fkey\\" FOREIGN KEY (approved_by) REFERENCES profiles(id) ON DELETE SET NULL not valid"
constraint \\"access_requests_approved_by_fkey\\""
constraint \\"access_requests_status_check\\""
constraint \\"access_requests_trip_id_fkey\\""
constraint \\"access_requests_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid"
constraint \\"access_requests_user_id_fkey\\""
constraint \\"albums_user_id_fkey\\""
constraint \\"budget_items_amount_check\\""
constraint \\"budget_items_paid_by_fkey\\""
constraint \\"budget_items_trip_id_fkey\\""
constraint \\"cities_continent_fkey\\""
constraint \\"collaborative_notes_created_by_fkey\\""
constraint \\"collaborative_notes_last_edited_by_fkey\\""
constraint \\"collaborative_notes_trip_id_fkey\\""
constraint \\"comment_reactions_comment_id_fkey\\" FOREIGN KEY (comment_id) REFERENCES comments(id) ON DELETE CASCADE not valid"
constraint \\"comment_reactions_comment_id_fkey\\""
constraint \\"comment_reactions_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid"
constraint \\"comment_reactions_user_id_fkey\\""
constraint \\"comments_content_type_check\\""
constraint \\"comments_parent_id_fkey\\""
constraint \\"comments_user_id_fkey\\""
constraint \\"content_customizations_item_id_fkey\\""
constraint \\"content_customizations_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid"
constraint \\"content_customizations_user_id_fkey\\""
constraint \\"content_quality_metrics_engagement_score_check\\""
constraint \\"content_quality_metrics_item_id_fkey\\""
constraint \\"content_quality_metrics_popularity_score_check\\" CHECK (((popularity_score >= (0)::double precision) AND (popularity_score <= (1)::double precision))) not valid"
constraint \\"content_quality_metrics_popularity_score_check\\""
constraint \\"content_quality_metrics_quality_score_check\\""
constraint \\"content_quality_metrics_trip_id_fkey\\""
constraint \\"content_sharing_history_item_id_fkey\\""
constraint \\"content_sharing_history_shared_by_fkey\\""
constraint \\"content_sharing_history_source_trip_id_fkey\\""
constraint \\"content_sharing_history_target_trip_id_fkey\\""
constraint \\"content_slugs_created_by_fkey\\" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid"
constraint \\"content_slugs_created_by_fkey\\""
constraint \\"continents_slug_key\\" UNIQUE using index \\"continents_slug_key\\""
constraint \\"countries_continent_id_fkey\\" FOREIGN KEY (continent_id) REFERENCES continents(id) ON DELETE SET NULL not valid"
constraint \\"countries_continent_id_fkey\\""
constraint \\"countries_currency_id_fkey\\""
constraint \\"countries_name_key\\" UNIQUE using index \\"countries_name_key\\""
constraint \\"countries_safety_rating_check\\" CHECK (((safety_rating >= 1) AND (safety_rating <= 5))) not valid"
constraint \\"countries_safety_rating_check\\""
constraint \\"country_languages_country_id_fkey\\" FOREIGN KEY (country_id) REFERENCES countries(id) ON DELETE CASCADE not valid"
constraint \\"country_languages_country_id_fkey\\""
constraint \\"country_languages_language_id_fkey\\""
constraint \\"destination_tags_added_by_fkey\\" FOREIGN KEY (added_by) REFERENCES auth.users(id) not valid"
constraint \\"destination_tags_added_by_fkey\\""
constraint \\"destination_tags_destination_id_fkey\\""
constraint \\"destination_tags_tag_id_fkey\\" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE not valid"
constraint \\"destination_tags_tag_id_fkey\\""
constraint \\"destinations_accessibility_check\\""
constraint \\"destinations_beach_quality_check\\""
constraint \\"destinations_cuisine_rating_check\\""
constraint \\"destinations_cultural_attractions_check\\""
constraint \\"destinations_eco_friendly_options_check\\""
constraint \\"destinations_instagram_worthy_spots_check\\""
constraint \\"destinations_lgbtq_friendliness_check\\""
constraint \\"destinations_nightlife_rating_check\\""
constraint \\"destinations_off_peak_appeal_check\\""
constraint \\"destinations_outdoor_activities_check\\""
constraint \\"destinations_public_transportation_check\\""
constraint \\"destinations_safety_rating_check\\""
constraint \\"destinations_shopping_rating_check\\""
constraint \\"destinations_walkability_check\\""
constraint \\"destinations_wifi_connectivity_check\\""
constraint \\"expenses_trip_id_fkey\\""
constraint \\"focus_sessions_initiated_by_fkey\\""
constraint \\"focus_sessions_trip_id_fkey\\""
constraint \\"form_collaborators_form_id_fkey\\""
constraint \\"form_collaborators_invited_by_fkey\\" FOREIGN KEY (invited_by) REFERENCES auth.users(id) ON DELETE SET NULL not valid"
constraint \\"form_collaborators_invited_by_fkey\\""
constraint \\"form_collaborators_user_id_fkey\\""
constraint \\"form_templates_created_by_fkey\\""
constraint \\"form_templates_last_modified_by_fkey\\""
constraint \\"forms_created_by_fkey\\""
constraint \\"forms_parent_form_id_fkey\\""
constraint \\"forms_template_id_fkey\\""
constraint \\"forms_trip_id_fkey\\""
constraint \\"group_activities_group_id_fkey\\""
constraint \\"group_activities_trip_id_fkey\\""
constraint \\"group_activities_user_id_fkey\\""
constraint \\"group_guest_members_group_id_fkey\\""
constraint \\"group_members_group_id_fkey\\""
constraint \\"group_members_role_check\\""
constraint \\"group_members_status_check\\""
constraint \\"group_members_user_id_fkey\\""
constraint \\"group_members_user_id_fkey1\\""
constraint \\"group_idea_comments_idea_id_fkey\\""
constraint \\"group_idea_comments_parent_id_fkey\\""
constraint \\"group_idea_comments_user_id_fkey\\""
constraint \\"group_idea_reactions_idea_id_fkey\\""
constraint \\"group_idea_reactions_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid"
constraint \\"group_idea_reactions_user_id_fkey\\""
constraint \\"group_idea_votes_idea_id_fkey\\""
constraint \\"group_idea_votes_idea_id_user_id_key\\" UNIQUE using index \\"group_idea_votes_idea_id_user_id_key\\""
constraint \\"group_idea_votes_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid"
constraint \\"group_idea_votes_user_id_fkey\\""
constraint \\"group_idea_votes_vote_type_check\\""
constraint \\"group_ideas_created_by_fkey\\""
constraint \\"group_ideas_group_id_fkey\\""
constraint \\"group_ideas_plan_id_fkey\\""
constraint \\"group_idea_plans_created_by_fkey\\""
constraint \\"group_idea_plans_group_id_fkey\\""
constraint \\"group_roles_name_key\\" UNIQUE using index \\"group_roles_name_key\\""
constraint \\"group_trips_added_by_fkey\\" FOREIGN KEY (added_by) REFERENCES auth.users(id) ON DELETE SET NULL not valid"
constraint \\"group_trips_added_by_fkey\\""
constraint \\"group_trips_group_id_fkey\\""
constraint \\"group_trips_trip_id_fkey\\""
constraint \\"groups_created_by_fkey\\""
constraint \\"groups_created_by_fkey1\\""
constraint \\"groups_visibility_check\\" CHECK ((visibility = ANY (ARRAY['private'::text
constraint \\"groups_visibility_check\\""
constraint \\"invitations_trip_id_fkey\\" FOREIGN KEY (trip_id) REFERENCES trips(id) ON UPDATE CASCADE ON DELETE CASCADE not valid"
constraint \\"invitations_trip_id_fkey\\""
constraint \\"item_popularity_metrics_item_id_fkey\\""
constraint \\"itinerary_item_reactions_emoji_check\\" CHECK ((emoji = ANY (ARRAY['👍'::text
constraint \\"itinerary_item_reactions_emoji_check\\""
constraint \\"itinerary_item_reactions_itinerary_item_id_fkey\\""
constraint \\"itinerary_item_reactions_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid"
constraint \\"itinerary_item_reactions_user_id_fkey\\""
constraint \\"itinerary_item_votes_itinerary_item_id_fkey\\""
constraint \\"itinerary_item_votes_user_id_fkey\\""
constraint \\"fk_itinerary_items_creator\\" FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE SET NULL not valid"
constraint \\"fk_itinerary_items_creator\\""
constraint \\"fk_itinerary_items_trip\\""
constraint \\"itinerary_items_attribution_type_check\\""
constraint \\"itinerary_items_content_layer_check\\""
constraint \\"itinerary_items_last_modified_by_fkey\\""
constraint \\"itinerary_items_original_id_fkey\\""
constraint \\"itinerary_items_section_id_fkey\\""
constraint \\"itinerary_items_share_status_check\\""
constraint \\"itinerary_items_source_trip_id_fkey\\""
constraint \\"itinerary_items_trip_id_fkey\\""
constraint \\"itinerary_sections_day_number_check\\""
constraint \\"itinerary_sections_trip_id_fkey\\" FOREIGN KEY (trip_id) REFERENCES trips(id) ON DELETE CASCADE not valid"
constraint \\"itinerary_sections_trip_id_fkey\\""
constraint \\"fk_itinerary_template_items_section_id\\""
constraint \\"fk_itinerary_template_items_template_id\\""
constraint \\"itinerary_template_items_day_check\\""
constraint \\"itinerary_template_sections_created_by_fkey\\""
constraint \\"itinerary_template_sections_template_id_fkey\\""
constraint \\"itinerary_templates_created_by_fkey\\""
constraint \\"itinerary_templates_destination_id_fkey\\""
constraint \\"itinerary_templates_source_trip_id_fkey\\" FOREIGN KEY (source_trip_id) REFERENCES trips(id) not valid"
constraint \\"itinerary_templates_source_trip_id_fkey\\""
constraint \\"itinerary_templates_template_type_check\\""
constraint \\"likes_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid"
constraint \\"likes_user_id_fkey\\""
constraint \\"locations_parent_id_fkey\\""
constraint \\"note_tags_note_id_fkey\\""
constraint \\"note_tags_tag_id_fkey\\""
constraint \\"notification_preferences_user_id_fkey\\""
constraint \\"notifications_sender_id_fkey\\" FOREIGN KEY (sender_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid"
constraint \\"notifications_sender_id_fkey\\""
constraint \\"notifications_trip_id_fkey\\""
constraint \\"notifications_user_id_fkey\\""
constraint \\"onboarding_events_user_id_fkey\\""
constraint \\"onboarding_preferences_user_id_fkey\\""
constraint \\"onboarding_tour_completions_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid"
constraint \\"onboarding_tour_completions_user_id_fkey\\""
constraint \\"permission_requests_trip_id_user_id_key\\" UNIQUE using index \\"permission_requests_trip_id_user_id_key\\""
constraint \\"place_nominations_reviewed_by_fkey\\" FOREIGN KEY (reviewed_by) REFERENCES auth.users(id) not valid"
constraint \\"place_nominations_reviewed_by_fkey\\""
constraint \\"preference_weights_weight_check\\" CHECK (((weight >= (0)::double precision) AND (weight <= (1)::double precision))) not valid"
constraint \\"preference_weights_weight_check\\""
constraint \\"profiles_home_location_id_fkey\\""
constraint \\"profiles_id_fkey\\""
constraint \\"question_branching_form_id_fkey\\""
constraint \\"question_branching_source_question_id_fkey\\""
constraint \\"question_branching_target_question_id_fkey\\""
constraint \\"questions_form_id_fkey\\""
constraint \\"referrals_referrer_id_referred_id_key\\" UNIQUE using index \\"referrals_referrer_id_referred_id_key\\""
constraint \\"response_sessions_form_id_fkey\\" FOREIGN KEY (form_id) REFERENCES forms(id) ON DELETE CASCADE not valid"
constraint \\"response_sessions_form_id_fkey\\""
constraint \\"response_sessions_user_id_fkey\\""
constraint \\"responses_question_id_fkey\\""
constraint \\"responses_session_id_fkey\\""
constraint \\"reviews_rating_check\\""
constraint \\"reviews_user_id_fkey\\""
constraint \\"survey_definitions_survey_id_key\\" UNIQUE using index \\"survey_definitions_survey_id_key\\""
constraint \\"survey_responses_survey_id_fkey\\" FOREIGN KEY (survey_id) REFERENCES survey_definitions(survey_id) not valid"
constraint \\"survey_responses_survey_id_fkey\\""
constraint \\"tags_created_by_fkey\\""
constraint \\"tags_slug_key\\" UNIQUE using index \\"tags_slug_key\\""
constraint \\"template_applications_applied_by_fkey\\" FOREIGN KEY (applied_by) REFERENCES auth.users(id) not valid"
constraint \\"template_applications_applied_by_fkey\\""
constraint \\"template_applications_template_id_fkey\\""
constraint \\"template_applications_trip_id_fkey\\""
constraint \\"trip_analytics_events_trip_id_fkey\\" FOREIGN KEY (trip_id) REFERENCES trips(id) ON DELETE CASCADE not valid"
constraint \\"trip_analytics_events_trip_id_fkey\\""
constraint \\"trip_analytics_events_user_id_fkey\\""
constraint \\"trip_comment_likes_comment_id_fkey\\""
constraint \\"trip_comment_likes_trip_id_fkey\\" FOREIGN KEY (trip_id) REFERENCES trips(id) ON DELETE CASCADE not valid"
constraint \\"trip_comment_likes_trip_id_fkey\\""
constraint \\"trip_comment_likes_user_id_fkey\\""
constraint \\"trip_history_trip_id_fkey\\""
constraint \\"trip_history_user_id_fkey\\""
constraint \\"trip_images_album_id_fkey\\""
constraint \\"trip_images_created_by_fkey\\""
constraint \\"trip_images_trip_id_fkey\\""
constraint \\"trip_item_comments_trip_id_fkey\\" FOREIGN KEY (trip_id) REFERENCES trips(id) ON DELETE CASCADE not valid"
constraint \\"trip_item_comments_trip_id_fkey\\""
constraint \\"trip_item_comments_user_id_fkey\\""
constraint \\"trip_logistics_created_by_fkey\\""
constraint \\"trip_logistics_trip_id_fkey\\""
constraint \\"trip_logistics_type_check\\""
constraint \\"trip_members_invited_by_fkey\\""
constraint \\"trip_members_trip_id_fkey\\""
constraint \\"trip_notes_album_id_fkey\\" FOREIGN KEY (album_id) REFERENCES albums(id) ON DELETE SET NULL not valid"
constraint \\"trip_notes_album_id_fkey\\""
constraint \\"trip_notes_trip_id_fkey\\""
constraint \\"trip_notes_updated_by_fkey\\""
constraint \\"trip_notes_updated_by_fkey1\\""
constraint \\"trip_notes_user_id_fkey\\""
constraint \\"trip_tags_tag_id_fkey\\""
constraint \\"trip_tags_trip_id_fkey\\""
constraint \\"trip_template_uses_applied_by_fkey\\""
constraint \\"trip_template_uses_template_id_fkey\\""
constraint \\"trip_template_uses_trip_id_fkey\\""
constraint \\"trip_vote_options_poll_id_fkey\\" FOREIGN KEY (poll_id) REFERENCES trip_vote_polls(id) ON DELETE CASCADE not valid"
constraint \\"trip_vote_options_poll_id_fkey\\""
constraint \\"trip_vote_polls_created_by_fkey\\""
constraint \\"trip_vote_polls_trip_id_fkey\\""
constraint \\"trip_votes_option_id_fkey\\""
constraint \\"trip_votes_poll_id_fkey\\""
constraint \\"trip_votes_trip_id_fkey\\" FOREIGN KEY (trip_id) REFERENCES trips(id) ON DELETE CASCADE not valid"
constraint \\"trip_votes_trip_id_fkey\\""
constraint \\"trip_votes_user_id_fkey\\""
constraint \\"trips_city_id_fkey\\""
constraint \\"trips_cover_image_position_y_check\\""
constraint \\"trips_created_by_fkey\\""
constraint \\"trips_date_flexibility_check\\""
constraint \\"trips_destination_id_fkey\\""
constraint \\"trips_name_check\\""
constraint \\"trips_slug_key\\" UNIQUE using index \\"trips_slug_key\\""
constraint \\"trips_travelers_count_check\\" CHECK ((travelers_count >= 0)) not valid"
constraint \\"trips_travelers_count_check\\""
constraint \\"user_activity_history_item_id_fkey\\""
constraint \\"user_activity_history_user_id_fkey\\""
constraint \\"user_interactions_destination_id_fkey\\""
constraint \\"user_interactions_user_id_fkey\\""
constraint \\"user_interests_strength_check\\""
constraint \\"user_interests_tag_id_fkey\\""
constraint \\"user_interests_user_id_fkey\\""
constraint \\"user_login_history_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid"
constraint \\"user_login_history_user_id_fkey\\""
constraint \\"user_preferences_user_id_fkey\\""
constraint \\"user_presence_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid"
constraint \\"user_presence_user_id_fkey\\""
constraint \\"user_suggested_tags_destination_id_fkey\\" FOREIGN KEY (destination_id) REFERENCES destinations(id) not valid"
constraint \\"user_suggested_tags_destination_id_fkey\\""
constraint \\"user_suggested_tags_user_id_fkey\\""
constraint \\"user_travel_destination_id_fkey\\" FOREIGN KEY (destination_id) REFERENCES destinations(id) ON DELETE CASCADE not valid"
constraint \\"user_travel_destination_id_fkey\\""
constraint \\"user_travel_user_id_fkey\\""
constraint \\"validation_logs_template_id_fkey\\""
constraint \\"validation_logs_trip_id_fkey\\""
constraint \\"validation_logs_validated_by_fkey\\""
constraint \\"votes_itinerary_item_id_fkey\\""
constraint \\"votes_user_id_fkey\\" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid"
constraint \\"votes_user_id_fkey\\""
constraint on (trip_id
constraint violation.'
CONSTRAINT fk_plan_id FOREIGN KEY (plan_id) \n REFERENCES public.group_plans(id) ON DELETE CASCADE
CONSTRAINT fk_group_id FOREIGN KEY (group_id)\n REFERENCES public.groups(id) ON DELETE CASCADE\n )
CONSTRAINT amr_id_pk PRIMARY KEY (id)
CONSTRAINT instances_pkey PRIMARY KEY (id)
CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id)
CONSTRAINT access_requests_pkey PRIMARY KEY (id)
CONSTRAINT albums_pkey PRIMARY KEY (id)
CONSTRAINT comment_reactions_comment_id_user_id_emoji_key UNIQUE (comment_id
CONSTRAINT comment_reactions_pkey PRIMARY KEY (id)
CONSTRAINT content_customizations_pkey PRIMARY KEY (id)
CONSTRAINT content_slugs_pkey PRIMARY KEY (id)
CONSTRAINT currencies_code_key UNIQUE (code)
CONSTRAINT destination_tags_pkey PRIMARY KEY (id)
CONSTRAINT form_collaborators_pkey PRIMARY KEY (id)
CONSTRAINT group_idea_reactions_pkey PRIMARY KEY (id)
CONSTRAINT group_idea_votes_idea_id_user_id_key UNIQUE (idea_id
CONSTRAINT group_idea_votes_pkey PRIMARY KEY (id)
CONSTRAINT group_plans_log_pkey PRIMARY KEY (id)
CONSTRAINT groups_pkey PRIMARY KEY (id)
CONSTRAINT image_metadata_pkey PRIMARY KEY (id)
CONSTRAINT itinerary_item_reactions_pkey PRIMARY KEY (id)
CONSTRAINT itinerary_template_items_pkey PRIMARY KEY (id)
CONSTRAINT milestone_triggers_study_type_survey_unique UNIQUE (study_id
CONSTRAINT note_tags_pkey PRIMARY KEY (note_id
CONSTRAINT notification_analytics_pkey PRIMARY KEY (id)
CONSTRAINT participant_variants_pkey PRIMARY KEY (id)
CONSTRAINT place_metrics_pkey PRIMARY KEY (place_id)
CONSTRAINT preference_weights_pkey PRIMARY KEY (id)
CONSTRAINT rate_limits_pkey PRIMARY KEY (id)
CONSTRAINT research_analytics_pkey PRIMARY KEY (id)
CONSTRAINT research_event_logs_pkey PRIMARY KEY (id)
CONSTRAINT trip_analytics_events_pkey PRIMARY KEY (id)
CONSTRAINT trip_comment_likes_comment_id_user_id_key UNIQUE (comment_id
CONSTRAINT trip_comment_likes_pkey PRIMARY KEY (id)
CONSTRAINT trip_item_comments_pkey PRIMARY KEY (id)
CONSTRAINT trip_notes_pkey PRIMARY KEY (id)
CONSTRAINT trip_template_uses_pkey PRIMARY KEY (id)
CONSTRAINT trip_vote_options_pkey PRIMARY KEY (id)
CONSTRAINT trips_pkey PRIMARY KEY (id)
CONSTRAINT unique_image_source UNIQUE (external_id
CONSTRAINT unique_milestone_trigger UNIQUE (participant_id
CONSTRAINT unique_user_feature UNIQUE (user_id
CONSTRAINT unique_user_place_review UNIQUE (user_id
CONSTRAINT unique_user_study UNIQUE (user_id
CONSTRAINT unique_user_tour UNIQUE (user_id
CONSTRAINT unique_user_vote_per_item UNIQUE (itinerary_item_id
CONSTRAINT user_activity_history_pkey PRIMARY KEY (id)
CONSTRAINT user_login_history_pkey PRIMARY KEY (id)
CONSTRAINT user_suggested_tags_pkey PRIMARY KEY (id)
CONSTRAINT validation_logs_pkey PRIMARY KEY (id)
CONSTRAINT votes_pkey PRIMARY KEY (id)
CONSTRAINT messages_2025_05_09_pkey PRIMARY KEY (id
CONSTRAINT messages_2025_05_10_pkey PRIMARY KEY (id
CONSTRAINT messages_2025_05_11_pkey PRIMARY KEY (id
CONSTRAINT messages_2025_05_12_pkey PRIMARY KEY (id
CONSTRAINT messages_2025_05_13_pkey PRIMARY KEY (id
CONSTRAINT messages_2025_05_14_pkey PRIMARY KEY (id
CONSTRAINT messages_2025_05_15_pkey PRIMARY KEY (id
CONSTRAINT pk_subscription PRIMARY KEY (id)
CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE

--- POLICIES ---
CREATE POLICY "Users can view their own plan events" ON public.plan_events FOR SELECT USING (auth.uid() = user_id);
create policy \\"Trip admins can update access requests\\"\non \\"public\\".\\"access_requests\\"\nas permissive\nfor update\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = access_requests.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::trip_role)))))","create policy \\"Trip members can view access requests for their trips\\"\non \\"public\\".\\"access_requests\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = access_requests.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Users can create access requests\\"\non \\"public\\".\\"access_requests\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Users can view their own access requests\\"\non \\"public\\".\\"access_requests\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow members to insert budget items for their trips\\"\non \\"public\\".\\"budget_items\\"\nas permissive\nfor insert\nto public\nwith check ((trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE (trip_members.user_id = auth.uid()))))","create policy \\"Allow members to read budget items for their trips\\"\non \\"public\\".\\"budget_items\\"\nas permissive\nfor select\nto public\nusing ((trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE (trip_members.user_id = auth.uid()))))","create policy \\"Allow users to delete their own budget items\\"\non \\"public\\".\\"budget_items\\"\nas permissive\nfor delete\nto public\nusing (((paid_by = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Allow users to update their own budget items\\"\non \\"public\\".\\"budget_items\\"\nas permissive\nfor update\nto public\nusing (((paid_by = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))\nwith check (((paid_by = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Trip members (admin/editor) can delete collaborative notes\\"\non \\"public\\".\\"collaborative_notes\\"\nas permissive\nfor delete\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND ((trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])) OR (auth.uid() = collaborative_notes.created_by))))))","create policy \\"Trip members can create collaborative notes\\"\non \\"public\\".\\"collaborative_notes\\"\nas permissive\nfor insert\nto public\nwith check (((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid())))) AND (auth.uid() = created_by)))","create policy \\"Trip members can update collaborative notes\\"\non \\"public\\".\\"collaborative_notes\\"\nas permissive\nfor update\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Trip members can view collaborative notes\\"\non \\"public\\".\\"collaborative_notes\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Anyone can read comment reactions\\"\non \\"public\\".\\"comment_reactions\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Users can delete their own reactions\\"\non \\"public\\".\\"comment_reactions\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can insert their own reactions\\"\non \\"public\\".\\"comment_reactions\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Anyone can read comments\\"\non \\"public\\".\\"comments\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Users can delete their own comments\\"\non \\"public\\".\\"comments\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can insert their own comments\\"\non \\"public\\".\\"comments\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Users can update their own comments\\"\non \\"public\\".\\"comments\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can create their own customizations\\"\non \\"public\\".\\"content_customizations\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Users can update their own customizations\\"\non \\"public\\".\\"content_customizations\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can view their own customizations\\"\non \\"public\\".\\"content_customizations\\"\nas permissive\nfor select\nto public\nusing (((auth.uid() = user_id) OR ((NOT is_private) AND (auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = ( SELECT itinerary_items.trip_id\n FROM itinerary_items\n WHERE (itinerary_items.id = content_customizations.item_id))))))))","create policy \\"Editors can update content quality metrics\\"\non \\"public\\".\\"content_quality_metrics\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE ((trip_members.trip_id = content_quality_metrics.trip_id) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Public read access to content quality metrics\\"\non \\"public\\".\\"content_quality_metrics\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Users can create sharing history for their trips\\"\non \\"public\\".\\"content_sharing_history\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = content_sharing_history.source_trip_id))))","create policy \\"Users can view sharing history for their trips\\"\non \\"public\\".\\"content_sharing_history\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = content_sharing_history.source_trip_id)\nUNION\n SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = content_sharing_history.target_trip_id))))","create policy \\"Content owners can manage slugs\\"\non \\"public\\".\\"content_slugs\\"\nas permissive\nfor all\nto public\nusing (\nCASE content_type\n WHEN 'trip'::content_type THEN (auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE ((trip_members.trip_id = content_slugs.content_id) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))\n WHEN 'itinerary_item'::content_type THEN (auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE ((trip_members.trip_id = ( SELECT itinerary_items.trip_id\n FROM itinerary_items\n WHERE (itinerary_items.id = content_slugs.content_id))) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))\n ELSE (auth.uid() = created_by)\nEND)","create policy \\"Public read access to content slugs\\"\non \\"public\\".\\"content_slugs\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Destination tags are viewable by everyone\\"\non \\"public\\".\\"destination_tags\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Only admins can create/update destination tags\\"\non \\"public\\".\\"destination_tags\\"\nas permissive\nfor all\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM profiles\n WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))","create policy \\"Allow admin users to insert destinations\\"\non \\"public\\".\\"destinations\\"\nas permissive\nfor insert\nto public\nwith check ((auth.role() = 'service_role'::text))","create policy \\"Allow authenticated users to insert destinations\\"\non \\"public\\".\\"destinations\\"\nas permissive\nfor insert\nto public\nwith check ((auth.role() = 'authenticated'::text))","create policy \\"Allow authenticated users to read destinations\\"\non \\"public\\".\\"destinations\\"\nas permissive\nfor select\nto public\nusing ((auth.role() = 'authenticated'::text))","create policy \\"Allow public read access to destinations\\"\non \\"public\\".\\"destinations\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Destinations are viewable by everyone.\\"\non \\"public\\".\\"destinations\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Public select on destinations\\"\non \\"public\\".\\"destinations\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Allow modification by admin/editor/contributor\\"\non \\"public\\".\\"expenses\\"\nas permissive\nfor all\nto authenticated\nusing (is_trip_member(trip_id, auth.uid()))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm_check\n WHERE ((tm_check.trip_id = expenses.trip_id) AND (tm_check.user_id = auth.uid()) AND (tm_check.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role]))))))","create policy \\"Allow read access for trip members\\"\non \\"public\\".\\"expenses\\"\nas permissive\nfor select\nto authenticated\nusing (is_trip_member(trip_id, auth.uid()))","create policy \\"expenses_delete_policy\\"\non \\"public\\".\\"expenses\\"\nas permissive\nfor delete\nto public\nusing (((paid_by = auth.uid()) OR (EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"expenses_insert_policy\\"\non \\"public\\".\\"expenses\\"\nas permissive\nfor insert\nto public\nwith check (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role])))))))","create policy \\"expenses_select_policy\\"\non \\"public\\".\\"expenses\\"\nas permissive\nfor select\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"expenses_update_policy\\"\non \\"public\\".\\"expenses\\"\nas permissive\nfor update\nto public\nusing (((paid_by = auth.uid()) OR (EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Trip admins and editors can create focus sessions\\"\non \\"public\\".\\"focus_sessions\\"\nas permissive\nfor insert\nto public\nwith check ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = focus_sessions.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Trip admins and editors can update focus sessions\\"\non \\"public\\".\\"focus_sessions\\"\nas permissive\nfor update\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = focus_sessions.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Trip members can view focus sessions\\"\non \\"public\\".\\"focus_sessions\\"\nas permissive\nfor select\nto public\nusing ((trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE (trip_members.user_id = auth.uid()))))","create policy \\"Authenticated users can create templates\\"\non \\"public\\".\\"form_templates\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = created_by))","create policy \\"Creators can delete their own templates\\"\non \\"public\\".\\"form_templates\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = created_by))","create policy \\"Creators can update their own templates\\"\non \\"public\\".\\"form_templates\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = created_by))\nwith check ((auth.uid() = created_by))","create policy \\"Creators can view their own templates\\"\non \\"public\\".\\"form_templates\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = created_by))","create policy \\"Everyone can view published templates\\"\non \\"public\\".\\"form_templates\\"\nas permissive\nfor select\nto public\nusing ((is_published = true))","create policy \\"Form creators can delete their forms\\"\non \\"public\\".\\"forms\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = created_by))","create policy \\"Form creators can update their forms\\"\non \\"public\\".\\"forms\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = created_by))\nwith check ((auth.uid() = created_by))","create policy \\"Trip admins and editors can update trip forms\\"\non \\"public\\".\\"forms\\"\nas permissive\nfor update\nto public\nusing (((trip_id IS NOT NULL) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))\nwith check (((trip_id IS NOT NULL) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Trip admins can delete trip forms\\"\non \\"public\\".\\"forms\\"\nas permissive\nfor delete\nto public\nusing (((trip_id IS NOT NULL) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::trip_role))))))","create policy \\"Users can insert forms they create\\"\non \\"public\\".\\"forms\\"\nas permissive\nfor insert\nto public\nwith check (((auth.uid() = created_by) AND ((trip_id IS NULL) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))))","create policy \\"Users can view forms they have access to\\"\non \\"public\\".\\"forms\\"\nas permissive\nfor select\nto public\nusing (((auth.uid() = created_by) OR (visibility = 'public'::text) OR ((visibility = 'members'::text) AND (trip_id IS NOT NULL) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()))))) OR (EXISTS ( SELECT 1\n FROM form_collaborators\n WHERE ((form_collaborators.form_id = form_collaborators.id) AND (form_collaborators.user_id = auth.uid()))))))","create policy \\"Group members can view activities\\"\non \\"public\\".\\"group_activities\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_activities.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text)))))","create policy \\"Allow authenticated users to join groups\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor insert\nto authenticated\nwith check ((user_id = auth.uid()))","create policy \\"Allow authenticated users to view their own memberships\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor select\nto authenticated\nusing ((user_id = auth.uid()))","create policy \\"Allow group admins to manage memberships\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor all\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM groups\n WHERE ((groups.id = group_members.group_id) AND (groups.created_by = auth.uid())))))","create policy \\"Allow group members to view their own membership\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor select\nto authenticated\nusing ((user_id = auth.uid()))","create policy \\"Group owners and admins can manage members\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor all\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM group_members group_members_1\n WHERE ((group_members_1.group_id = group_members_1.group_id) AND (group_members_1.user_id = auth.uid()) AND (group_members_1.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members_1.status = 'active'::text)))))\nwith check ((EXISTS ( SELECT 1\n FROM group_members group_members_1\n WHERE ((group_members_1.group_id = group_members_1.group_id) AND (group_members_1.user_id = auth.uid()) AND (group_members_1.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members_1.status = 'active'::text)))))","create policy \\"Users can manage their own membership (except ownership)\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor update\nto authenticated\nusing (((user_id = auth.uid()) AND (role <> 'owner'::text)))\nwith check (((user_id = auth.uid()) AND (role <> 'owner'::text)))","create policy \\"Users can view members of groups they belong to\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM group_members group_members_1\n WHERE ((group_members_1.group_id = group_members_1.group_id) AND (group_members_1.user_id = auth.uid()) AND (group_members_1.status = 'active'::text)))))","create policy \\"Users can view their own membership\\"\non \\"public\\".\\"group_members\\"\nas permissive\nfor select\nto authenticated\nusing ((user_id = auth.uid()))","create policy \\"Group plan idea comments are viewable by group members or guest\\"\non \\"public\\".\\"group_plan_idea_comments\\"\nas permissive\nfor select\nto public\nusing (((EXISTS ( SELECT 1\n FROM group_plan_ideas gi\n WHERE ((gi.id = group_plan_idea_comments.idea_id) AND is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea comments can be created by group members or gue\\"\non \\"public\\".\\"group_plan_idea_comments\\"\nas permissive\nfor insert\nto public\nwith check (((EXISTS ( SELECT 1\n FROM group_plan_ideas gi\n WHERE ((gi.id = group_plan_idea_comments.idea_id) AND is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea comments can be deleted by creators, group owne\\"\non \\"public\\".\\"group_plan_idea_comments\\"\nas permissive\nfor delete\nto public\nusing (((user_id = auth.uid()) OR (EXISTS ( SELECT 1\n FROM ((group_plan_ideas gi\n JOIN groups g ON ((gi.group_id = g.id)))\n JOIN group_members gm ON ((g.id = gm.group_id)))\n WHERE ((gi.id = group_plan_idea_comments.idea_id) AND (gm.user_id = auth.uid()) AND (gm.role = 'owner'::text)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea comments can be updated by creators or guests w\\"\non \\"public\\".\\"group_plan_idea_comments\\"\nas permissive\nfor update\nto public\nusing (((user_id = auth.uid()) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea reactions are viewable by group members or gues\\"\non \\"public\\".\\"group_plan_idea_reactions\\"\nas permissive\nfor select\nto public\nusing (((EXISTS ( SELECT 1\n FROM group_plan_ideas gi\n WHERE ((gi.id = group_plan_idea_reactions.idea_id) AND is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea reactions can be created by group members or gu\\"\non \\"public\\".\\"group_plan_idea_reactions\\"\nas permissive\nfor insert\nto public\nwith check (((EXISTS ( SELECT 1\n FROM group_plan_ideas gi\n WHERE ((gi.id = group_plan_idea_reactions.idea_id) AND is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea reactions can be deleted by creators or guests \\"\non \\"public\\".\\"group_plan_idea_reactions\\"\nas permissive\nfor delete\nto public\nusing (((user_id = auth.uid()) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan idea reactions can be updated by creators or guests \\"\non \\"public\\".\\"group_plan_idea_reactions\\"\nas permissive\nfor update\nto public\nusing (((user_id = auth.uid()) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Authenticated users can vote\\"\non \\"public\\".\\"group_plan_idea_votes\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() IS NOT NULL))","create policy \\"Everyone can view votes\\"\non \\"public\\".\\"group_plan_idea_votes\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Users can modify their own votes\\"\non \\"public\\".\\"group_plan_idea_votes\\"\nas permissive\nfor update\nto public\nusing ((user_id = auth.uid()))\nwith check ((user_id = auth.uid()))","create policy \\"Everyone can view group ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor select\nto public\nusing ((((auth.uid() IS NOT NULL) AND (EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text))))) OR (EXISTS ( SELECT 1\n FROM groups\n WHERE ((groups.id = group_plan_ideas.group_id) AND (groups.visibility = ANY (ARRAY['public'::text, 'shared_with_link'::text])))))))","create policy \\"Group admins can modify any idea\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text)))))\nwith check ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text)))))","create policy \\"Group members can create ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor insert\nto public\nwith check (((auth.uid() IS NOT NULL) AND (EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text))))))","create policy \\"Group plan ideas are viewable by group members or guests with t\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor select\nto public\nusing ((is_group_member(group_id) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan ideas can be created by group members or guests with\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor insert\nto public\nwith check ((is_group_member(group_id) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan ideas can be deleted by creators, group owners, or g\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor delete\nto public\nusing (((created_by = auth.uid()) OR (EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = 'owner'::text)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Group plan ideas can be updated by creators, group owners, or g\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor update\nto public\nusing (((created_by = auth.uid()) OR (EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = 'owner'::text)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))))","create policy \\"Users can modify their own ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor update\nto public\nusing ((created_by = auth.uid()))\nwith check ((created_by = auth.uid()))","create policy \\"delete_own_group_ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor delete\nto public\nusing ((created_by = auth.uid()))","create policy \\"insert_group_ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() IS NOT NULL))","create policy \\"read_group_ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"update_own_group_ideas\\"\non \\"public\\".\\"group_plan_ideas\\"\nas permissive\nfor update\nto public\nusing ((created_by = auth.uid()))","create policy \\"Group admins can manage trips\\"\non \\"public\\".\\"group_trips\\"\nas permissive\nfor all\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_trips.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text)))))\nwith check ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_trips.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text)))))","create policy \\"Group members can view group trips\\"\non \\"public\\".\\"group_trips\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = group_trips.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text)))))","create policy \\"Allow authenticated users to create groups\\"\non \\"public\\".\\"groups\\"\nas permissive\nfor insert\nto authenticated\nwith check ((created_by = auth.uid()))","create policy \\"Allow group creation for all\\"\non \\"public\\".\\"groups\\"\nas permissive\nfor insert\nto public\nwith check (true)","create policy \\"Group creators can do anything\\"\non \\"public\\".\\"groups\\"\nas permissive\nfor all\nto authenticated\nusing ((created_by = auth.uid()))\nwith check ((created_by = auth.uid()))","create policy \\"Group members can view groups they belong to\\"\non \\"public\\".\\"groups\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM group_members\n WHERE ((group_members.group_id = groups.id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text)))))","create policy \\"Groups with link sharing are viewable\\"\non \\"public\\".\\"groups\\"\nas permissive\nfor select\nto authenticated\nusing ((visibility = 'shared_with_link'::text))","create policy \\"Public groups are viewable by anyone\\"\non \\"public\\".\\"groups\\"\nas permissive\nfor select\nto authenticated\nusing ((visibility = 'public'::text))","create policy \\"image_metadata_insert_policy\\"\non \\"public\\".\\"image_metadata\\"\nas permissive\nfor insert\nto public\nwith check (((auth.role() = 'authenticated'::text) AND (((entity_type = 'user_avatar'::image_type) AND (entity_id = auth.uid())) OR ((entity_type = 'trip_cover'::image_type) AND (EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = image_metadata.entity_id) AND (trips.created_by = auth.uid()))))) OR ((entity_type = 'template_cover'::image_type) AND (EXISTS ( SELECT 1\n FROM itinerary_templates\n WHERE ((itinerary_templates.id = image_metadata.entity_id) AND (itinerary_templates.created_by = auth.uid()))))))))","create policy \\"image_metadata_select_policy\\"\non \\"public\\".\\"image_metadata\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"image_metadata_update_policy\\"\non \\"public\\".\\"image_metadata\\"\nas permissive\nfor update\nto public\nusing (((auth.role() = 'authenticated'::text) AND ((EXISTS ( SELECT 1\n FROM profiles\n WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))) OR (((entity_type = 'user_avatar'::image_type) AND (entity_id = auth.uid())) OR ((entity_type = 'trip_cover'::image_type) AND (EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = image_metadata.entity_id) AND (trips.created_by = auth.uid()))))) OR ((entity_type = 'template_cover'::image_type) AND (EXISTS ( SELECT 1\n FROM itinerary_templates\n WHERE ((itinerary_templates.id = image_metadata.entity_id) AND (itinerary_templates.created_by = auth.uid())))))))))","create policy \\"Everyone can view popularity metrics\\"\non \\"public\\".\\"item_popularity_metrics\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Allow members to delete their own votes\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow members to insert their own votes\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor insert\nto public\nwith check (((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n FROM (itinerary_items ii\n JOIN trip_members tm ON ((ii.trip_id = tm.trip_id)))\n WHERE ((ii.id = itinerary_item_votes.itinerary_item_id) AND (tm.user_id = auth.uid()) AND (tm.joined_at IS NOT NULL))))))","create policy \\"Allow members to update their own votes\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))\nwith check ((auth.uid() = user_id))","create policy \\"Allow trip members to view votes\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM (itinerary_items ii\n JOIN trip_members tm ON ((ii.trip_id = tm.trip_id)))\n WHERE ((ii.id = itinerary_item_votes.itinerary_item_id) AND (tm.user_id = auth.uid()) AND (tm.joined_at IS NOT NULL)))))","create policy \\"itinerary_item_votes_delete_policy\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor delete\nto public\nusing ((user_id = auth.uid()))","create policy \\"itinerary_item_votes_insert_policy\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor insert\nto public\nwith check (((user_id = auth.uid()) AND (EXISTS ( SELECT 1\n FROM (itinerary_items\n JOIN trip_members ON ((itinerary_items.trip_id = trip_members.trip_id)))\n WHERE ((itinerary_items.id = itinerary_item_votes.itinerary_item_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"itinerary_item_votes_select_policy\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor select\nto public\nusing (((EXISTS ( SELECT 1\n FROM (itinerary_items\n JOIN trips ON ((itinerary_items.trip_id = trips.id)))\n WHERE ((itinerary_items.id = itinerary_item_votes.itinerary_item_id) AND (trips.is_public = true)))) OR (EXISTS ( SELECT 1\n FROM (itinerary_items\n JOIN trip_members ON ((itinerary_items.trip_id = trip_members.trip_id)))\n WHERE ((itinerary_items.id = itinerary_item_votes.itinerary_item_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"itinerary_item_votes_update_policy\\"\non \\"public\\".\\"itinerary_item_votes\\"\nas permissive\nfor update\nto public\nusing ((user_id = auth.uid()))","create policy \\"Admins and owners can edit items\\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor update\nto public\nusing (((auth.uid() = created_by) OR (auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE ((trip_members.trip_id = itinerary_items.trip_id) AND (trip_members.role = 'admin'::trip_role))))))","create policy \\"Allow contributors to manage itinerary items\\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_items.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role) OR (tm.role = 'contributor'::trip_role))))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_items.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role) OR (tm.role = 'contributor'::trip_role))))))","create policy \\"Allow editors/admins to manage items in accessible sections or \\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.user_id = auth.uid()) AND (tm.trip_id = itinerary_items.trip_id) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.user_id = auth.uid()) AND (tm.trip_id = itinerary_items.trip_id) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role)) AND ((itinerary_items.section_id IS NULL) OR (EXISTS ( SELECT 1\n FROM itinerary_sections s\n WHERE (s.id = itinerary_items.section_id))))))))","create policy \\"Allow members to view items in accessible sections or unschedul\\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.user_id = auth.uid()) AND (tm.trip_id = itinerary_items.trip_id) AND ((itinerary_items.section_id IS NULL) OR (EXISTS ( SELECT 1\n FROM itinerary_sections s\n WHERE (s.id = itinerary_items.section_id))))))))","create policy \\"Allow members to view itinerary items\\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_items.trip_id) AND (tm.user_id = auth.uid())))))","create policy \\"Allow modification access for admin/editor/contributor\\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor all\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = itinerary_items.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role]))))))","create policy \\"Allow read access for members or if trip public\\"\non \\"public\\".\\"itinerary_items\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = itinerary_items.trip_id) AND ((trips.is_public = true) OR is_trip_member(itinerary_items.trip_id, auth.uid()))))))","create policy \\"Allow admins/editors to manage sections\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))","create policy \\"Allow editors/admins to manage their trip sections\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))","create policy \\"Allow members to view sections\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid())))))","create policy \\"Allow members to view their trip sections\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid())))))","create policy \\"itinerary_sections_delete_policy\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor delete\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"itinerary_sections_insert_policy\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor insert\nto public\nwith check (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role])))))))","create policy \\"itinerary_sections_select_policy\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor select\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.is_public = true)))) OR (EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"itinerary_sections_update_policy\\"\non \\"public\\".\\"itinerary_sections\\"\nas permissive\nfor update\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Allow all users to view published templates\\"\non \\"public\\".\\"itinerary_templates\\"\nas permissive\nfor select\nto public\nusing ((is_published = true))","create policy \\"Allow authenticated users to create templates\\"\non \\"public\\".\\"itinerary_templates\\"\nas permissive\nfor insert\nto public\nwith check (((auth.role() = 'authenticated'::text) AND (created_by = auth.uid())))","create policy \\"Allow creators to update their own templates\\"\non \\"public\\".\\"itinerary_templates\\"\nas permissive\nfor update\nto public\nusing ((created_by = auth.uid()))\nwith check ((created_by = auth.uid()))","create policy \\"Allow creators to view their own unpublished templates\\"\non \\"public\\".\\"itinerary_templates\\"\nas permissive\nfor select\nto public\nusing ((created_by = auth.uid()))","create policy \\"Users can create their own likes\\"\non \\"public\\".\\"likes\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Users can delete their own likes\\"\non \\"public\\".\\"likes\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can view their own likes\\"\non \\"public\\".\\"likes\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow editors/admins to manage note tags\\"\non \\"public\\".\\"note_tags\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_notes tn\n WHERE ((tn.id = note_tags.note_id) AND is_trip_member_with_role(tn.trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text])))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_notes tn\n WHERE ((tn.id = note_tags.note_id) AND is_trip_member_with_role(tn.trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text])))))","create policy \\"Allow members to view note tags\\"\non \\"public\\".\\"note_tags\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM (trip_notes tn\n JOIN trip_members tm ON ((tn.trip_id = tm.trip_id)))\n WHERE ((tn.id = note_tags.note_id) AND (tm.user_id = auth.uid())))))","create policy \\"Users can manage their own notification preferences\\"\non \\"public\\".\\"notification_preferences\\"\nas permissive\nfor all\nto public\nusing ((user_id = auth.uid()))","create policy \\"Users can update their own notification read status\\"\non \\"public\\".\\"notifications\\"\nas permissive\nfor update\nto public\nusing ((user_id = auth.uid()))","create policy \\"Users can view their own notifications\\"\non \\"public\\".\\"notifications\\"\nas permissive\nfor select\nto public\nusing ((user_id = auth.uid()))","create policy \\"Users can insert their own onboarding events\\"\non \\"public\\".\\"onboarding_events\\"\nas permissive\nfor insert\nto authenticated\nwith check ((user_id = auth.uid()))","create policy \\"Users can view their own onboarding events\\"\non \\"public\\".\\"onboarding_events\\"\nas permissive\nfor select\nto authenticated\nusing ((user_id = auth.uid()))","create policy \\"Users can insert and update their feature preferences\\"\non \\"public\\".\\"onboarding_preferences\\"\nas permissive\nfor all\nto authenticated\nusing ((user_id = auth.uid()))\nwith check ((user_id = auth.uid()))","create policy \\"Users can insert their own preferences\\"\non \\"public\\".\\"onboarding_preferences\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Users can update their own preferences\\"\non \\"public\\".\\"onboarding_preferences\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can view their feature preferences\\"\non \\"public\\".\\"onboarding_preferences\\"\nas permissive\nfor select\nto authenticated\nusing ((user_id = auth.uid()))","create policy \\"Users can view their own preferences\\"\non \\"public\\".\\"onboarding_preferences\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can insert and update their tour completions\\"\non \\"public\\".\\"onboarding_tour_completions\\"\nas permissive\nfor all\nto authenticated\nusing ((user_id = auth.uid()))\nwith check ((user_id = auth.uid()))","create policy \\"Users can insert their own tour completions\\"\non \\"public\\".\\"onboarding_tour_completions\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Users can update their own tour completions\\"\non \\"public\\".\\"onboarding_tour_completions\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can view their own tour completions\\"\non \\"public\\".\\"onboarding_tour_completions\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can view their tour completions\\"\non \\"public\\".\\"onboarding_tour_completions\\"\nas permissive\nfor select\nto authenticated\nusing ((user_id = auth.uid()))","create policy \\"Allow authenticated users to insert requests for themselves\\"\non \\"public\\".\\"permission_requests\\"\nas permissive\nfor insert\nto public\nwith check (((auth.role() = 'authenticated'::text) AND (auth.uid() = user_id)))","create policy \\"Allow delete by admins/editors or requester\\"\non \\"public\\".\\"permission_requests\\"\nas permissive\nfor delete\nto public\nusing (((auth.uid() = user_id) OR (auth.uid() IN ( SELECT tm.user_id\n FROM trip_members tm\n WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Allow select for admins/editors and requesters\\"\non \\"public\\".\\"permission_requests\\"\nas permissive\nfor select\nto public\nusing (((auth.uid() = user_id) OR (auth.uid() IN ( SELECT tm.user_id\n FROM trip_members tm\n WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Allow update by admins/editors\\"\non \\"public\\".\\"permission_requests\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() IN ( SELECT tm.user_id\n FROM trip_members tm\n WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))\nwith check ((auth.uid() IN ( SELECT tm.user_id\n FROM trip_members tm\n WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Everyone can view preference weights\\"\non \\"public\\".\\"preference_weights\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Only admins can manage preference weights\\"\non \\"public\\".\\"preference_weights\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM auth.users\n WHERE ((users.id = auth.uid()) AND ((users.raw_user_meta_data ->> 'is_admin'::text) = 'true'::text)))))","create policy \\"Allow individual user read access\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor select\nto authenticated\nusing ((auth.uid() = id))","create policy \\"Allow individual user select access\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = id))","create policy \\"Allow individual user update access\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = id))\nwith check ((auth.uid() = id))","create policy \\"Disallow delete access\\"\non \\"public\\".\\"profiles\\"\nas restrictive\nfor delete\nto authenticated\nusing (false)","create policy \\"Disallow direct profile deletes\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor delete\nto public\nusing (false)","create policy \\"Disallow direct profile inserts\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor insert\nto public\nwith check (false)","create policy \\"Public profiles are viewable by everyone.\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Users can insert their own profile.\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = id))","create policy \\"Users can update own profile.\\"\non \\"public\\".\\"profiles\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = id))","create policy \\"Allow admins to delete tags\\"\non \\"public\\".\\"tags\\"\nas permissive\nfor delete\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM profiles\n WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))","create policy \\"Allow admins to update tags\\"\non \\"public\\".\\"tags\\"\nas permissive\nfor update\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM profiles\n WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))\nwith check ((EXISTS ( SELECT 1\n FROM profiles\n WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))","create policy \\"Allow authenticated users to insert tags\\"\non \\"public\\".\\"tags\\"\nas permissive\nfor insert\nto authenticated\nwith check (true)","create policy \\"Allow authenticated users to read tags\\"\non \\"public\\".\\"tags\\"\nas permissive\nfor select\nto authenticated\nusing (true)","create policy \\"Tags are viewable by everyone\\"\non \\"public\\".\\"tags\\"\nas permissive\nfor select\nto public\nusing (true)","create policy \\"Users can create template applications for their trips\\"\non \\"public\\".\\"template_applications\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = template_applications.trip_id))))","create policy \\"Users can view template applications for their trips\\"\non \\"public\\".\\"template_applications\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = template_applications.trip_id))))","create policy \\"Trip members can like comments\\"\non \\"public\\".\\"trip_comment_likes\\"\nas permissive\nfor insert\nto public\nwith check (((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_comment_likes.trip_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"Trip members can view likes\\"\non \\"public\\".\\"trip_comment_likes\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_comment_likes.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Users can unlike their own likes\\"\non \\"public\\".\\"trip_comment_likes\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow members to read trip history\\"\non \\"public\\".\\"trip_history\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = trip_history.trip_id))))","create policy \\"trip_images_delete_policy\\"\non \\"public\\".\\"trip_images\\"\nas permissive\nfor delete\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_images.trip_id) AND (trip_members.user_id = auth.uid()) AND ((trip_members.role = 'admin'::trip_role) OR (trip_members.role = 'editor'::trip_role))))))","create policy \\"trip_images_insert_policy\\"\non \\"public\\".\\"trip_images\\"\nas permissive\nfor insert\nto public\nwith check ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_images.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role <> 'viewer'::trip_role)))))","create policy \\"trip_images_select_policy\\"\non \\"public\\".\\"trip_images\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_images.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Trip members can add comments\\"\non \\"public\\".\\"trip_item_comments\\"\nas permissive\nfor insert\nto public\nwith check (((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_item_comments.trip_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"Trip members can view comments\\"\non \\"public\\".\\"trip_item_comments\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_item_comments.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Users can delete their own comments\\"\non \\"public\\".\\"trip_item_comments\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can update their own comments\\"\non \\"public\\".\\"trip_item_comments\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))","create policy \\"Trip admins and editors can manage logistics\\"\non \\"public\\".\\"trip_logistics\\"\nas permissive\nfor all\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_logistics.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Trip members can view logistics\\"\non \\"public\\".\\"trip_logistics\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_logistics.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Allow admins to delete notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor delete\nto public\nusing (is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text]))","create policy \\"Allow contributors and up to insert notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor insert\nto public\nwith check (((user_id = auth.uid()) AND (has_trip_role(trip_id, auth.uid(), 'admin'::trip_role) OR has_trip_role(trip_id, auth.uid(), 'editor'::trip_role) OR has_trip_role(trip_id, auth.uid(), 'contributor'::trip_role))))","create policy \\"Allow editors and up to delete any notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor delete\nto public\nusing ((has_trip_role(trip_id, auth.uid(), 'admin'::trip_role) OR has_trip_role(trip_id, auth.uid(), 'editor'::trip_role)))","create policy \\"Allow editors and up to update any notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor update\nto public\nusing ((has_trip_role(trip_id, auth.uid(), 'admin'::trip_role) OR has_trip_role(trip_id, auth.uid(), 'editor'::trip_role)))","create policy \\"Allow editors/admins or last updater to update notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor update\nto public\nusing ((is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]) OR (updated_by = auth.uid())))\nwith check ((is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]) OR (updated_by = auth.uid())))","create policy \\"Allow editors/admins to create notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor insert\nto public\nwith check (is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]))","create policy \\"Allow editors/admins to insert notes for their trip\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor insert\nto public\nwith check (((updated_by = auth.uid()) AND (trip_id IN ( SELECT tm.trip_id\n FROM trip_members tm\n WHERE ((tm.user_id = auth.uid()) AND (tm.role = ANY (ARRAY['editor'::trip_role, 'admin'::trip_role])))))))","create policy \\"Allow editors/admins to update notes for their trip\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor update\nto public\nusing ((trip_id IN ( SELECT tm.trip_id\n FROM trip_members tm\n WHERE ((tm.user_id = auth.uid()) AND (tm.role = ANY (ARRAY['editor'::trip_role, 'admin'::trip_role]))))))\nwith check (((updated_by = auth.uid()) AND (trip_id IN ( SELECT tm.trip_id\n FROM trip_members tm\n WHERE ((tm.user_id = auth.uid()) AND (tm.role = ANY (ARRAY['editor'::trip_role, 'admin'::trip_role])))))))","create policy \\"Allow members to view notes for their trip\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor select\nto public\nusing ((trip_id IN ( SELECT tm.trip_id\n FROM trip_members tm\n WHERE (tm.user_id = auth.uid()))))","create policy \\"Allow members to view trip notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor select\nto public\nusing (is_trip_member(trip_id, auth.uid()))","create policy \\"Allow users to delete own notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow users to update own notes\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))","create policy \\"trip_notes_delete_policy\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor delete\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::trip_role))))))","create policy \\"trip_notes_insert_policy\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor insert\nto public\nwith check (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role])))))))","create policy \\"trip_notes_select_policy\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor select\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = trip_notes.trip_id) AND (trips.is_public = true)))) OR (EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"trip_notes_update_policy\\"\non \\"public\\".\\"trip_notes\\"\nas permissive\nfor update\nto public\nusing (((EXISTS ( SELECT 1\n FROM trips\n WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role])))))))","create policy \\"Allow admins/editors to manage trip tags\\"\non \\"public\\".\\"trip_tags\\"\nas permissive\nfor all\nto public\nusing (can_manage_trip_members(trip_id))\nwith check (can_manage_trip_members(trip_id))","create policy \\"Allow insert/delete for trip admins/editors\\"\non \\"public\\".\\"trip_tags\\"\nas permissive\nfor all\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_tags.trip_id) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))\nwith check ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_tags.trip_id) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Allow members to view their trip tags\\"\non \\"public\\".\\"trip_tags\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trip_tags.trip_id) AND (tm.user_id = auth.uid())))))","create policy \\"Allow select access for trip members or public trips\\"\non \\"public\\".\\"trip_tags\\"\nas permissive\nfor select\nto public\nusing ((( SELECT trips.is_public\n FROM trips\n WHERE (trips.id = trip_tags.trip_id)) OR (auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = trip_tags.trip_id)))))","create policy \\"Users can create template uses for their trips\\"\non \\"public\\".\\"trip_template_uses\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = trip_template_uses.trip_id))))","create policy \\"Users can view their own trip template uses\\"\non \\"public\\".\\"trip_template_uses\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = trip_template_uses.trip_id))))","create policy \\"Trip members can view options\\"\non \\"public\\".\\"trip_vote_options\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM (trip_vote_polls\n JOIN trip_members ON ((trip_vote_polls.trip_id = trip_members.trip_id)))\n WHERE ((trip_vote_options.poll_id = trip_vote_polls.id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Trip members with edit permissions can create options\\"\non \\"public\\".\\"trip_vote_options\\"\nas permissive\nfor insert\nto public\nwith check ((EXISTS ( SELECT 1\n FROM (trip_vote_polls\n JOIN trip_members ON ((trip_vote_polls.trip_id = trip_members.trip_id)))\n WHERE ((trip_vote_options.poll_id = trip_vote_polls.id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Trip admin/editor/creator can update polls\\"\non \\"public\\".\\"trip_vote_polls\\"\nas permissive\nfor update\nto public\nusing (((created_by = auth.uid()) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_vote_polls.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role])))))))","create policy \\"Trip members can view polls\\"\non \\"public\\".\\"trip_vote_polls\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_vote_polls.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Trip members with edit permissions can create polls\\"\non \\"public\\".\\"trip_vote_polls\\"\nas permissive\nfor insert\nto public\nwith check ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_vote_polls.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role]))))))","create policy \\"Trip members can view votes\\"\non \\"public\\".\\"trip_votes\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_votes.trip_id) AND (trip_members.user_id = auth.uid())))))","create policy \\"Trip members can vote\\"\non \\"public\\".\\"trip_votes\\"\nas permissive\nfor insert\nto public\nwith check (((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_votes.trip_id) AND (trip_members.user_id = auth.uid()))))))","create policy \\"Users can delete their own votes\\"\non \\"public\\".\\"trip_votes\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow admin delete access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor delete\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND (tm.role = 'admin'::trip_role)))))","create policy \\"Allow admin/editor update access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor update\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))","create policy \\"Allow authenticated users to manage trips\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor all\nto authenticated\nusing (((auth.uid() = created_by) OR (EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trips.id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::trip_role))))))","create policy \\"Allow creator full access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor all\nto public\nusing ((auth.uid() = created_by))\nwith check ((auth.uid() = created_by))","create policy \\"Allow delete access for admins only\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor delete\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm_check\n WHERE ((tm_check.trip_id = trips.id) AND (tm_check.user_id = auth.uid()) AND (tm_check.role = 'admin'::trip_role)))))","create policy \\"Allow insert access for authenticated users\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor insert\nto authenticated\nwith check (true)","create policy \\"Allow member read access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor select\nto public\nusing ((auth.role() = 'authenticated'::text))","create policy \\"Allow public read access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor select\nto public\nusing ((is_public = true))","create policy \\"Allow read access for members or if public\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor select\nto authenticated\nusing (((is_public = true) OR (EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()))))))","create policy \\"Allow trip admins delete access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor delete\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND (tm.role = 'admin'::trip_role)))))","create policy \\"Allow trip admins/editors to update trips\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor update\nto authenticated\nusing (check_if_user_is_trip_member_with_role(auth.uid(), id, ARRAY['admin'::trip_role, 'editor'::trip_role]))\nwith check (check_if_user_is_trip_member_with_role(auth.uid(), id, ARRAY['admin'::trip_role, 'editor'::trip_role]))","create policy \\"Allow trip admins/editors update access\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor update\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm\n WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::trip_role) OR (tm.role = 'editor'::trip_role))))))","create policy \\"Allow update access for admin/editor/contributor\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor update\nto authenticated\nusing (((is_public = true) OR is_trip_member(id, auth.uid())))\nwith check ((EXISTS ( SELECT 1\n FROM trip_members tm_check\n WHERE ((tm_check.trip_id = trips.id) AND (tm_check.user_id = auth.uid()) AND (tm_check.role = ANY (ARRAY['admin'::trip_role, 'editor'::trip_role, 'contributor'::trip_role]))))))","create policy \\"Users can view public trips\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor select\nto public\nusing ((privacy_setting = 'public'::trip_privacy_setting))","create policy \\"Users can view trips they are members of\\"\non \\"public\\".\\"trips\\"\nas permissive\nfor select\nto public\nusing ((EXISTS ( SELECT 1\n FROM trip_members\n WHERE ((trip_members.trip_id = trip_members.id) AND (trip_members.user_id = auth.uid())))))","create policy \\"System can insert activity history\\"\non \\"public\\".\\"user_activity_history\\"\nas permissive\nfor insert\nto public\nwith check (true)","create policy \\"Users can view their own activity history\\"\non \\"public\\".\\"user_activity_history\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can create their own interactions\\"\non \\"public\\".\\"user_interactions\\"\nas permissive\nfor insert\nto authenticated\nwith check ((auth.uid() = user_id))","create policy \\"Users can update their own interactions\\"\non \\"public\\".\\"user_interactions\\"\nas permissive\nfor update\nto authenticated\nusing ((auth.uid() = user_id))","create policy \\"Users can view their own interactions\\"\non \\"public\\".\\"user_interactions\\"\nas permissive\nfor select\nto authenticated\nusing ((auth.uid() = user_id))","create policy \\"Users can manage their own interests\\"\non \\"public\\".\\"user_interests\\"\nas permissive\nfor all\nto authenticated\nusing ((auth.uid() = user_id))","create policy \\"Users can view their own interests\\"\non \\"public\\".\\"user_interests\\"\nas permissive\nfor select\nto authenticated\nusing ((auth.uid() = user_id))","create policy \\"Only system can insert login history\\"\non \\"public\\".\\"user_login_history\\"\nas permissive\nfor insert\nto public\nwith check (true)","create policy \\"Users can view their own login history\\"\non \\"public\\".\\"user_login_history\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can manage their own preferences\\"\non \\"public\\".\\"user_preferences\\"\nas permissive\nfor all\nto public\nusing ((auth.uid() = user_id))","create policy \\"Users can view their own preferences\\"\non \\"public\\".\\"user_preferences\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Admins can view all tag suggestions\\"\non \\"public\\".\\"user_suggested_tags\\"\nas permissive\nfor select\nto authenticated\nusing ((EXISTS ( SELECT 1\n FROM profiles\n WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))","create policy \\"Users can create tag suggestions\\"\non \\"public\\".\\"user_suggested_tags\\"\nas permissive\nfor insert\nto authenticated\nwith check ((auth.uid() = user_id))","create policy \\"Users can view their own tag suggestions\\"\non \\"public\\".\\"user_suggested_tags\\"\nas permissive\nfor select\nto authenticated\nusing ((auth.uid() = user_id))","create policy \\"Allow delete on user_travel\\"\non \\"public\\".\\"user_travel\\"\nas permissive\nfor delete\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow insert on user_travel\\"\non \\"public\\".\\"user_travel\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() = user_id))","create policy \\"Allow select on user_travel\\"\non \\"public\\".\\"user_travel\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() = user_id))","create policy \\"Allow update on user_travel\\"\non \\"public\\".\\"user_travel\\"\nas permissive\nfor update\nto public\nusing ((auth.uid() = user_id))\nwith check ((auth.uid() = user_id))","create policy \\"Users can create validation logs for their trips\\"\non \\"public\\".\\"validation_logs\\"\nas permissive\nfor insert\nto public\nwith check ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = validation_logs.trip_id))))","create policy \\"Users can view validation logs for their trips\\"\non \\"public\\".\\"validation_logs\\"\nas permissive\nfor select\nto public\nusing ((auth.uid() IN ( SELECT trip_members.user_id\n FROM trip_members\n WHERE (trip_members.trip_id = validation_logs.trip_id))))","create policy \\"Allow members to delete their own vote\\"\non \\"public\\".\\"votes\\"\nas permissive\nfor delete\nto public\nusing ((user_id = auth.uid()))","create policy \\"Allow members to insert/update their own vote\\"\non \\"public\\".\\"votes\\"\nas permissive\nfor all\nto public\nusing ((user_id = auth.uid()))\nwith check (((user_id = auth.uid()) AND (itinerary_item_id IN ( SELECT itinerary_items.id\n FROM itinerary_items\n WHERE (itinerary_items.trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE (trip_members.user_id = auth.uid())))))))","create policy \\"Allow members to manage own votes\\"\non \\"public\\".\\"votes\\"\nas permissive\nfor all\nto public\nusing (((auth.uid() = user_id) AND (EXISTS ( SELECT 1\n FROM (trip_members tm\n JOIN itinerary_items ii ON ((tm.trip_id = ii.trip_id)))\n WHERE ((ii.id = votes.itinerary_item_id) AND (tm.user_id = auth.uid()))))))\nwith check ((auth.uid() = user_id))","create policy \\"Allow members to view votes on their trip items\\"\non \\"public\\".\\"votes\\"\nas permissive\nfor select\nto public\nusing ((itinerary_item_id IN ( SELECT itinerary_items.id\n FROM itinerary_items\n WHERE (itinerary_items.trip_id IN ( SELECT trip_members.trip_id\n FROM trip_members\n WHERE (trip_members.user_id = auth.uid()))))))","CREATE TRIGGER update_access_requests_updated_at BEFORE UPDATE ON public.access_requests FOR EACH ROW EXECUTE FUNCTION update_access_requests_updated_at()","CREATE TRIGGER update_budget_items_updated_at BEFORE UPDATE ON public.budget_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER update_collaborative_notes_metadata BEFORE UPDATE ON public.collaborative_notes FOR EACH ROW WHEN ((old.* IS DISTINCT FROM new.*)) EXECUTE FUNCTION update_collaborative_notes_metadata()","CREATE TRIGGER comment_reactions_trigger AFTER INSERT OR DELETE ON public.comment_reactions FOR EACH ROW EXECUTE FUNCTION update_comment_reactions_count()","CREATE TRIGGER comment_replies_trigger AFTER INSERT OR DELETE OR UPDATE ON public.comments FOR EACH ROW EXECUTE FUNCTION update_comment_replies_count()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.destinations FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER focus_session_history AFTER INSERT ON public.focus_sessions FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER after_group_member_change AFTER INSERT OR DELETE OR UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER before_update_group_member BEFORE UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_timestamp()","CREATE TRIGGER group_members_count_delete AFTER DELETE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER group_members_count_insert AFTER INSERT ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER group_members_count_update AFTER UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER group_members_updated_at BEFORE UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_timestamp()","CREATE TRIGGER set_auth_identifier_group_plan_idea_comments BEFORE INSERT ON public.group_plan_idea_comments FOR EACH ROW EXECUTE FUNCTION set_auth_identifier()","CREATE TRIGGER set_auth_identifier_group_plan_idea_reactions BEFORE INSERT ON public.group_plan_idea_reactions FOR EACH ROW EXECUTE FUNCTION set_auth_identifier()","CREATE TRIGGER after_vote_change AFTER INSERT OR DELETE OR UPDATE ON public.group_plan_idea_votes FOR EACH ROW EXECUTE FUNCTION update_vote_counts()","CREATE TRIGGER before_update_group_idea BEFORE UPDATE ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION update_group_idea_timestamp()","CREATE TRIGGER set_auth_identifier_group_plan_ideas BEFORE INSERT ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION set_auth_identifier()","CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER after_group_trip_change AFTER INSERT OR DELETE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_count()","CREATE TRIGGER before_update_group_trip BEFORE UPDATE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_timestamp()","CREATE TRIGGER group_trips_count_delete AFTER DELETE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_count()","CREATE TRIGGER group_trips_count_insert AFTER INSERT ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_count()","CREATE TRIGGER group_trips_updated_at BEFORE UPDATE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_timestamp()","CREATE TRIGGER before_insert_group BEFORE INSERT ON public.groups FOR EACH ROW WHEN (((new.slug IS NULL) OR (new.slug = ''::text))) EXECUTE FUNCTION generate_group_slug()","CREATE TRIGGER before_update_group BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION update_group_timestamp()","CREATE TRIGGER groups_generate_slug BEFORE INSERT OR UPDATE OF name ON public.groups FOR EACH ROW EXECUTE FUNCTION generate_group_slug()","CREATE TRIGGER groups_updated_at BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION update_group_timestamp()","CREATE TRIGGER update_image_metadata_updated_at BEFORE UPDATE ON public.image_metadata FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER validate_image_metadata_entity BEFORE INSERT OR UPDATE ON public.image_metadata FOR EACH ROW EXECUTE FUNCTION validate_image_metadata_entity()","CREATE TRIGGER handle_updated_at_itinerary_item_votes BEFORE UPDATE ON public.itinerary_item_votes FOR EACH ROW EXECUTE FUNCTION moddatetime()","CREATE TRIGGER create_quality_metrics AFTER INSERT ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION update_quality_metrics()","CREATE TRIGGER itinerary_item_history AFTER INSERT OR DELETE OR UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER maintain_seo_fields BEFORE INSERT OR UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION update_canonical_url()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER update_likes_updated_at BEFORE UPDATE ON public.likes FOR EACH ROW EXECUTE FUNCTION update_likes_updated_at()","CREATE TRIGGER set_notification_preferences_timestamp BEFORE UPDATE ON public.notification_preferences FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER before_update_onboarding_preferences BEFORE UPDATE ON public.onboarding_preferences FOR EACH ROW EXECUTE FUNCTION update_onboarding_preferences_timestamp()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.survey_definitions FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.survey_responses FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER history_notification_trigger AFTER INSERT ON public.trip_history FOR EACH ROW WHEN ((new.user_id IS NOT NULL)) EXECUTE FUNCTION create_notification_from_history()","CREATE TRIGGER set_updated_at_trip_item_comments BEFORE UPDATE ON public.trip_item_comments FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER trip_comment_history AFTER INSERT OR DELETE OR UPDATE ON public.trip_item_comments FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER set_trip_logistics_updated_at BEFORE UPDATE ON public.trip_logistics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER trip_member_history AFTER INSERT OR DELETE OR UPDATE ON public.trip_members FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER update_trip_last_viewed AFTER UPDATE OF last_viewed_at ON public.trip_members FOR EACH ROW WHEN ((old.last_viewed_at IS DISTINCT FROM new.last_viewed_at)) EXECUTE FUNCTION update_trip_last_accessed()","CREATE TRIGGER trip_vote_history AFTER INSERT ON public.trip_votes FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER update_trip_duration BEFORE INSERT OR UPDATE OF start_date, end_date ON public.trips FOR EACH ROW EXECUTE FUNCTION calculate_trip_duration()","CREATE TRIGGER update_trips_timestamp BEFORE UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION update_timestamp()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_events FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER after_user_interaction AFTER INSERT ON public.user_interactions FOR EACH ROW EXECUTE FUNCTION update_profile_from_interaction()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_testing_signups FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER trg_decrement_travelers AFTER DELETE ON public.user_travel FOR EACH ROW EXECUTE FUNCTION decrement_travelers_count()","CREATE TRIGGER trg_increment_travelers AFTER INSERT ON public.user_travel FOR EACH ROW EXECUTE FUNCTION increment_travelers_count()"} remote_schema 20230815000000 {"-- Add metadata JSONB column if it doesn't exist (idempotent)\nALTER TABLE itinerary_templates \nADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}'::jsonb","-- Add an index for more efficient querying of metadata fields\nCREATE INDEX IF NOT EXISTS idx_itinerary_templates_metadata\nON itinerary_templates USING gin (metadata)","-- Add a comment to document the purpose of the metadata field\nCOMMENT ON COLUMN itinerary_templates.metadata IS 'Stores additional structured data about the itinerary template, including pace, seasonality, budget, local tips, etc.'"} add_itinerary_template_metadata_index 20240620000000 {"-- Create the auth_modal_analytics table\nCREATE TABLE IF NOT EXISTS auth_modal_analytics (\n id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n event_name TEXT NOT NULL,\n event_data JSONB DEFAULT '{}'::jsonb,\n user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n context TEXT,\n ab_test_variant TEXT,\n timestamp TIMESTAMPTZ NOT NULL DEFAULT now(),\n url TEXT,\n \n -- Add metadata fields that are useful for analytics\n browser TEXT,\n device_type TEXT,\n country TEXT,\n referrer TEXT,\n session_id TEXT\n)","-- Add indexes for querying\nCREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_event_name ON auth_modal_analytics(event_name)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_context ON auth_modal_analytics(context)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_ab_test_variant ON auth_modal_analytics(ab_test_variant)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_timestamp ON auth_modal_analytics(timestamp)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_user_id ON auth_modal_analytics(user_id)","-- Create an RLS policy that allows anyone to insert records\n-- This is needed since we want to track analytics even for non-authenticated users\nALTER TABLE auth_modal_analytics ENABLE ROW LEVEL SECURITY","-- Allow all users to insert analytics data\nCREATE POLICY insert_auth_modal_analytics_policy \n ON auth_modal_analytics \n FOR INSERT \n TO authenticated, anon\n WITH CHECK (true)","-- Only allow admins to select/update/delete analytics data\nCREATE POLICY admin_auth_modal_analytics_policy \n ON auth_modal_analytics \n USING (\n auth.uid() IN (\n SELECT id FROM profiles WHERE role = 'admin'\n )\n )","-- Create a materialized view for faster analytics queries\nCREATE MATERIALIZED VIEW IF NOT EXISTS auth_modal_analytics_summary AS\nSELECT\n date_trunc('day', timestamp) AS day,\n event_name,\n context,\n ab_test_variant,\n COUNT(*) AS event_count\nFROM auth_modal_analytics\nGROUP BY 1, 2, 3, 4\nORDER BY 1 DESC","-- Create a function to refresh the materialized view\nCREATE OR REPLACE FUNCTION refresh_auth_modal_analytics_summary()\nRETURNS TRIGGER AS $$\nBEGIN\n REFRESH MATERIALIZED VIEW CONCURRENTLY auth_modal_analytics_summary;
CREATE POLICY \\"Users can view their own plan events\\" ON public.plan_events\n FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Admin insert research links" ON public.research_links FOR INSERT WITH CHECK ((auth.uid() IN ( SELECT profiles.id FROM public.profiles WHERE (profiles.role = 'admin'::public.user_role))));
CREATE POLICY "Admin read all research links" ON public.research_links FOR SELECT USING ((auth.uid() IN ( SELECT profiles.id FROM public.profiles WHERE (profiles.role = 'admin'::public.user_role))));
CREATE POLICY "Admins and owners can edit items" ON public.itinerary_items FOR UPDATE USING (((auth.uid() = created_by) OR (auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE ((trip_members.trip_id = itinerary_items.trip_id) AND (trip_members.role = 'admin'::public.trip_role))))));
CREATE POLICY "Admins can manage all trip memberships" ON public.trip_members USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::public.user_role))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::public.user_role)))));
CREATE POLICY "Admins can view all tag suggestions" ON public.user_suggested_tags FOR SELECT TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY "Allow admin delete access" ON public.trips FOR DELETE USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND (tm.role = 'admin'::public.trip_role)))));
CREATE POLICY "Allow admin users to insert destinations" ON public.destinations FOR INSERT WITH CHECK ((auth.role() = 'service_role'::text));
CREATE POLICY "Allow admin/editor update access" ON public.trips FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role))))));
CREATE POLICY "Allow admins to delete notes" ON public.trip_notes FOR DELETE USING (public.is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text]));
CREATE POLICY "Allow admins to delete tags" ON public.tags FOR DELETE TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY "Allow admins to update tags" ON public.tags FOR UPDATE TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY "Allow admins/editors to manage sections" ON public.itinerary_sections USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role))))));
CREATE POLICY "Allow admins/editors to manage trip tags" ON public.trip_tags USING (public.can_manage_trip_members(trip_id)) WITH CHECK (public.can_manage_trip_members(trip_id));
CREATE POLICY "Allow all for admins" ON public.research_studies TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY "Allow all users to view published templates" ON public.itinerary_templates FOR SELECT USING ((is_published = true));
CREATE POLICY "Allow authenticated users to insert destinations" ON public.destinations FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Allow authenticated users to insert requests for themselves" ON public.permission_requests FOR INSERT WITH CHECK (((auth.role() = 'authenticated'::text) AND (auth.uid() = user_id)));
CREATE POLICY "Allow authenticated users to insert tags" ON public.tags FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow authenticated users to manage trips" ON public.trips TO authenticated USING (((auth.uid() = created_by) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trips.id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role))))));
CREATE POLICY "Allow authenticated users to read destinations" ON public.destinations FOR SELECT USING ((auth.role() = 'authenticated'::text));
CREATE POLICY "Allow authenticated users to read tags" ON public.tags FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to view items" ON public.itinerary_template_items FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to view sections" ON public.itinerary_template_sections FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow contributors and up to insert notes" ON public.trip_notes FOR INSERT WITH CHECK (((user_id = auth.uid()) AND (public.has_trip_role(trip_id, auth.uid(), 'admin'::public.trip_role) OR public.has_trip_role(trip_id, auth.uid(), 'editor'::public.trip_role) OR public.has_trip_role(trip_id, auth.uid(), 'contributor'::public.trip_role))));
CREATE POLICY "Allow contributors to manage itinerary items" ON public.itinerary_items USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_items.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role) OR (tm.role = 'contributor'::public.trip_role)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_items.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role) OR (tm.role = 'contributor'::public.trip_role))))));
CREATE POLICY "Allow creator full access" ON public.trips USING ((auth.uid() = created_by)) WITH CHECK ((auth.uid() = created_by));
CREATE POLICY "Allow delete access for admins only" ON public.trips FOR DELETE TO authenticated USING ((EXISTS ( SELECT 1 FROM public.trip_members tm_check WHERE ((tm_check.trip_id = trips.id) AND (tm_check.user_id = auth.uid()) AND (tm_check.role = 'admin'::public.trip_role)))));
CREATE POLICY "Allow delete by admins/editors or requester" ON public.permission_requests FOR DELETE USING (((auth.uid() = user_id) OR (auth.uid() IN ( SELECT tm.user_id FROM public.trip_members tm WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY "Allow editors and up to delete any notes" ON public.trip_notes FOR DELETE USING ((public.has_trip_role(trip_id, auth.uid(), 'admin'::public.trip_role) OR public.has_trip_role(trip_id, auth.uid(), 'editor'::public.trip_role)));
CREATE POLICY "Allow editors and up to update any notes" ON public.trip_notes FOR UPDATE USING ((public.has_trip_role(trip_id, auth.uid(), 'admin'::public.trip_role) OR public.has_trip_role(trip_id, auth.uid(), 'editor'::public.trip_role)));
CREATE POLICY "Allow editors/admins or last updater to update notes" ON public.trip_notes FOR UPDATE USING ((public.is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]) OR (updated_by = auth.uid()))) WITH CHECK ((public.is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]) OR (updated_by = auth.uid())));
CREATE POLICY "Allow editors/admins to create notes" ON public.trip_notes FOR INSERT WITH CHECK (public.is_trip_member_with_role(trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]));
CREATE POLICY "Allow editors/admins to insert notes for their trip" ON public.trip_notes FOR INSERT WITH CHECK (((updated_by = auth.uid()) AND (trip_id IN ( SELECT tm.trip_id FROM public.trip_members tm WHERE ((tm.user_id = auth.uid()) AND (tm.role = ANY (ARRAY['editor'::public.trip_role, 'admin'::public.trip_role])))))));
CREATE POLICY "Allow editors/admins to manage items in accessible sections or " ON public.itinerary_items USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.user_id = auth.uid()) AND (tm.trip_id = itinerary_items.trip_id) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.user_id = auth.uid()) AND (tm.trip_id = itinerary_items.trip_id) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role)) AND ((itinerary_items.section_id IS NULL) OR (EXISTS ( SELECT 1 FROM public.itinerary_sections s WHERE (s.id = itinerary_items.section_id))))))));
CREATE POLICY "Allow editors/admins to manage note tags" ON public.note_tags USING ((EXISTS ( SELECT 1 FROM public.trip_notes tn WHERE ((tn.id = note_tags.note_id) AND public.is_trip_member_with_role(tn.trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text]))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_notes tn WHERE ((tn.id = note_tags.note_id) AND public.is_trip_member_with_role(tn.trip_id, auth.uid(), ARRAY['admin'::text, 'editor'::text])))));
CREATE POLICY "Allow editors/admins to manage their trip sections" ON public.itinerary_sections USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role))))));
CREATE POLICY "Allow editors/admins to update notes for their trip" ON public.trip_notes FOR UPDATE USING ((trip_id IN ( SELECT tm.trip_id FROM public.trip_members tm WHERE ((tm.user_id = auth.uid()) AND (tm.role = ANY (ARRAY['editor'::public.trip_role, 'admin'::public.trip_role])))))) WITH CHECK (((updated_by = auth.uid()) AND (trip_id IN ( SELECT tm.trip_id FROM public.trip_members tm WHERE ((tm.user_id = auth.uid()) AND (tm.role = ANY (ARRAY['editor'::public.trip_role, 'admin'::public.trip_role])))))));
CREATE POLICY "Allow group creation" ON public.groups FOR INSERT WITH CHECK (((auth.role() = 'authenticated'::text) OR (EXISTS ( SELECT 1 FROM public.guest_tokens WHERE (guest_tokens.token = ((current_setting('request.jwt.claims'::text, true))::json ->> 'guest_token'::text))))));
CREATE POLICY "Allow individual user read access" ON public.profiles FOR SELECT TO authenticated USING ((auth.uid() = id));
CREATE POLICY "Allow individual user select access" ON public.profiles FOR SELECT USING ((auth.uid() = id));
CREATE POLICY "Allow individual user update access" ON public.profiles FOR UPDATE USING ((auth.uid() = id)) WITH CHECK ((auth.uid() = id));
CREATE POLICY "Allow insert access for authenticated users" ON public.trips FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow insert/delete for trip admins/editors" ON public.trip_tags USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE ((trip_members.trip_id = trip_tags.trip_id) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))) WITH CHECK ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE ((trip_members.trip_id = trip_tags.trip_id) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Allow member read access" ON public.trips FOR SELECT USING ((auth.role() = 'authenticated'::text));
CREATE POLICY "Allow members to delete their own vote" ON public.votes FOR DELETE USING ((user_id = auth.uid()));
CREATE POLICY "Allow members to delete their own votes" ON public.itinerary_item_votes FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Allow members to insert budget items for their trips" ON public.budget_items FOR INSERT WITH CHECK ((trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE (trip_members.user_id = auth.uid()))));
CREATE POLICY "Allow members to insert their own votes" ON public.itinerary_item_votes FOR INSERT WITH CHECK (((auth.uid() = user_id) AND (EXISTS ( SELECT 1 FROM (public.itinerary_items ii JOIN public.trip_members tm ON ((ii.trip_id = tm.trip_id))) WHERE ((ii.id = itinerary_item_votes.itinerary_item_id) AND (tm.user_id = auth.uid()) AND (tm.joined_at IS NOT NULL))))));
CREATE POLICY "Allow members to insert/update their own vote" ON public.votes USING ((user_id = auth.uid())) WITH CHECK (((user_id = auth.uid()) AND (itinerary_item_id IN ( SELECT itinerary_items.id FROM public.itinerary_items WHERE (itinerary_items.trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE (trip_members.user_id = auth.uid())))))));
CREATE POLICY "Allow members to manage own votes" ON public.votes USING (((auth.uid() = user_id) AND (EXISTS ( SELECT 1 FROM (public.trip_members tm JOIN public.itinerary_items ii ON ((tm.trip_id = ii.trip_id))) WHERE ((ii.id = votes.itinerary_item_id) AND (tm.user_id = auth.uid())))))) WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Allow members to read budget items for their trips" ON public.budget_items FOR SELECT USING ((trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE (trip_members.user_id = auth.uid()))));
CREATE POLICY "Allow members to read trip history" ON public.trip_history FOR SELECT USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = trip_history.trip_id))));
CREATE POLICY "Allow members to update their own votes" ON public.itinerary_item_votes FOR UPDATE USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Allow members to view items in accessible sections or unschedul" ON public.itinerary_items FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.user_id = auth.uid()) AND (tm.trip_id = itinerary_items.trip_id) AND ((itinerary_items.section_id IS NULL) OR (EXISTS ( SELECT 1 FROM public.itinerary_sections s WHERE (s.id = itinerary_items.section_id))))))));
CREATE POLICY "Allow members to view itinerary items" ON public.itinerary_items FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_items.trip_id) AND (tm.user_id = auth.uid())))));
CREATE POLICY "Allow members to view note tags" ON public.note_tags FOR SELECT USING ((EXISTS ( SELECT 1 FROM (public.trip_notes tn JOIN public.trip_members tm ON ((tn.trip_id = tm.trip_id))) WHERE ((tn.id = note_tags.note_id) AND (tm.user_id = auth.uid())))));
CREATE POLICY "Allow members to view notes for their trip" ON public.trip_notes FOR SELECT USING ((trip_id IN ( SELECT tm.trip_id FROM public.trip_members tm WHERE (tm.user_id = auth.uid()))));
CREATE POLICY "Allow members to view sections" ON public.itinerary_sections FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid())))));
CREATE POLICY "Allow members to view their trip sections" ON public.itinerary_sections FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = itinerary_sections.trip_id) AND (tm.user_id = auth.uid())))));
CREATE POLICY "Allow members to view their trip tags" ON public.trip_tags FOR SELECT TO authenticated USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trip_tags.trip_id) AND (tm.user_id = auth.uid())))));
CREATE POLICY "Allow members to view trip notes" ON public.trip_notes FOR SELECT USING (public.is_trip_member(trip_id, auth.uid()));
CREATE POLICY "Allow members to view votes on their trip items" ON public.votes FOR SELECT USING ((itinerary_item_id IN ( SELECT itinerary_items.id FROM public.itinerary_items WHERE (itinerary_items.trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE (trip_members.user_id = auth.uid()))))));
CREATE POLICY "Allow modification access for admin/editor/contributor" ON public.itinerary_items TO authenticated USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = itinerary_items.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role]))))));
CREATE POLICY "Allow modification by admin/editor/contributor" ON public.expenses TO authenticated USING (public.is_trip_member(trip_id, auth.uid())) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm_check WHERE ((tm_check.trip_id = expenses.trip_id) AND (tm_check.user_id = auth.uid()) AND (tm_check.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role]))))));
CREATE POLICY "Allow public read access" ON public.trips FOR SELECT USING ((is_public = true));
CREATE POLICY "Allow public read access to destinations" ON public.destinations FOR SELECT USING (true);
CREATE POLICY "Allow read access for members or if public" ON public.trips FOR SELECT TO authenticated USING (((is_public = true) OR (EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()))))));
CREATE POLICY "Allow read access for members or if trip public" ON public.itinerary_items FOR SELECT TO authenticated USING ((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = itinerary_items.trip_id) AND ((trips.is_public = true) OR public.is_trip_member(itinerary_items.trip_id, auth.uid()))))));
CREATE POLICY "Allow read access for trip members" ON public.expenses FOR SELECT TO authenticated USING (public.is_trip_member(trip_id, auth.uid()));
CREATE POLICY "Allow select access for trip members or public trips" ON public.trip_tags FOR SELECT USING ((( SELECT trips.is_public FROM public.trips WHERE (trips.id = trip_tags.trip_id)) OR (auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = trip_tags.trip_id)))));
CREATE POLICY "Allow select for admins/editors and requesters" ON public.permission_requests FOR SELECT USING (((auth.uid() = user_id) OR (auth.uid() IN ( SELECT tm.user_id FROM public.trip_members tm WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY "Allow select for all" ON public.research_studies FOR SELECT USING (true);
CREATE POLICY "Allow trip admins delete access" ON public.trips FOR DELETE USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND (tm.role = 'admin'::public.trip_role)))));
CREATE POLICY "Allow trip admins to invite users to a group/trip" ON public.invitations FOR INSERT WITH CHECK ((((type = 'trip'::public.invitation_type) AND (trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role))))) OR ((type = 'group'::public.invitation_type) AND (group_id IN ( SELECT group_members.group_id FROM public.group_members WHERE ((group_members.user_id = auth.uid()) AND (group_members.role = 'admin'::text))))) OR ((type = 'referral'::public.invitation_type) AND (inviter_id = auth.uid()))));
CREATE POLICY "Allow trip admins/editors to update trips" ON public.trips FOR UPDATE TO authenticated USING (public.check_if_user_is_trip_member_with_role(auth.uid(), id, ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])) WITH CHECK (public.check_if_user_is_trip_member_with_role(auth.uid(), id, ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]));
CREATE POLICY "Allow trip admins/editors update access" ON public.trips FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm WHERE ((tm.trip_id = trips.id) AND (tm.user_id = auth.uid()) AND ((tm.role = 'admin'::public.trip_role) OR (tm.role = 'editor'::public.trip_role))))));
CREATE POLICY "Allow trip members to view votes" ON public.itinerary_item_votes FOR SELECT USING ((EXISTS ( SELECT 1 FROM (public.itinerary_items ii JOIN public.trip_members tm ON ((ii.trip_id = tm.trip_id))) WHERE ((ii.id = itinerary_item_votes.itinerary_item_id) AND (tm.user_id = auth.uid()) AND (tm.joined_at IS NOT NULL)))));
CREATE POLICY "Allow update access for admin/editor/contributor" ON public.trips FOR UPDATE TO authenticated USING (((is_public = true) OR public.is_trip_member(id, auth.uid()))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members tm_check WHERE ((tm_check.trip_id = trips.id) AND (tm_check.user_id = auth.uid()) AND (tm_check.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role]))))));
CREATE POLICY "Allow update by admins/editors" ON public.permission_requests FOR UPDATE USING ((auth.uid() IN ( SELECT tm.user_id FROM public.trip_members tm WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))) WITH CHECK ((auth.uid() IN ( SELECT tm.user_id FROM public.trip_members tm WHERE ((tm.trip_id = permission_requests.trip_id) AND (tm.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Allow users to accept their invitations" ON public.invitations FOR UPDATE USING (((email = auth.email()) OR (used_by = auth.uid()) OR (invited_by = auth.uid()) OR (sender_id = auth.uid())));
CREATE POLICY "Allow users to create invitations" ON public.invitations FOR INSERT WITH CHECK (((sender_id = auth.uid()) OR (invited_by = auth.uid())));
CREATE POLICY "Allow users to delete invitations they created" ON public.invitations FOR DELETE USING (((sender_id = auth.uid()) OR (invited_by = auth.uid())));
CREATE POLICY "Allow users to delete own notes" ON public.trip_notes FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Allow users to delete their own budget items" ON public.budget_items FOR DELETE USING (((paid_by = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY "Allow users to update own notes" ON public.trip_notes FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Allow users to update their own budget items" ON public.budget_items FOR UPDATE USING (((paid_by = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))))) WITH CHECK (((paid_by = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY "Allow users to view invitations they're involved with" ON public.invitations FOR SELECT USING (((sender_id = auth.uid()) OR (invited_by = auth.uid()) OR (email = auth.email()) OR (used_by = auth.uid()) OR ((group_id IS NOT NULL) AND (group_id IN ( SELECT group_members.group_id FROM public.group_members WHERE ((group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text)))))));
CREATE POLICY "Anyone can read comment reactions" ON public.comment_reactions FOR SELECT USING (true);
CREATE POLICY "Anyone can read comments" ON public.comments FOR SELECT USING (true);
CREATE POLICY "Anyone can remove themselves from trip_members" ON public.trip_members FOR DELETE USING ((user_id = auth.uid()));
CREATE POLICY "Anyone can view research studies" ON public.research_studies FOR SELECT TO anon, authenticated USING (true);
CREATE POLICY "Anyone can view research tasks" ON public.research_tasks FOR SELECT TO anon, authenticated USING (true);
CREATE POLICY "Authenticated users can create templates" ON public.form_templates FOR INSERT WITH CHECK ((auth.uid() = created_by));
CREATE POLICY "Authenticated users can insert their own records" ON public.milestone_trigger_history FOR INSERT TO authenticated WITH CHECK ((auth.uid() IN ( SELECT research_participants.user_id FROM public.research_participants WHERE (research_participants.id = milestone_trigger_history.participant_id))));
CREATE POLICY "Authenticated users can vote" ON public.group_plan_idea_votes FOR INSERT WITH CHECK ((auth.uid() IS NOT NULL));
CREATE POLICY "Content owners can manage slugs" ON public.content_slugs USING ( CASE content_type WHEN 'trip'::public.content_type THEN (auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE ((trip_members.trip_id = content_slugs.content_id) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))) WHEN 'itinerary_item'::public.content_type THEN (auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE ((trip_members.trip_id = ( SELECT itinerary_items.trip_id FROM public.itinerary_items WHERE (itinerary_items.id = content_slugs.content_id))) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))) ELSE (auth.uid() = created_by) END);
CREATE POLICY "Creators can delete their own templates" ON public.form_templates FOR DELETE USING ((auth.uid() = created_by));
CREATE POLICY "Creators can update their own templates" ON public.form_templates FOR UPDATE USING ((auth.uid() = created_by)) WITH CHECK ((auth.uid() = created_by));
CREATE POLICY "Creators can view their own templates" ON public.form_templates FOR SELECT USING ((auth.uid() = created_by));
CREATE POLICY "Destination tags are viewable by everyone" ON public.destination_tags FOR SELECT USING (true);
CREATE POLICY "Destinations are viewable by everyone." ON public.destinations FOR SELECT USING (true);
CREATE POLICY "Disallow delete access" ON public.profiles AS RESTRICTIVE FOR DELETE TO authenticated USING (false);
CREATE POLICY "Disallow direct profile deletes" ON public.profiles FOR DELETE USING (false);
CREATE POLICY "Disallow direct profile inserts" ON public.profiles FOR INSERT WITH CHECK (false);
CREATE POLICY "Editors can update content quality metrics" ON public.content_quality_metrics FOR UPDATE USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE ((trip_members.trip_id = content_quality_metrics.trip_id) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Enable insert for authenticated users only" ON public.invitations FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable read access for all users" ON public.trip_cities FOR SELECT TO authenticated USING (true);
CREATE POLICY "Everyone can view group ideas" ON public.group_plan_ideas FOR SELECT USING ((((auth.uid() IS NOT NULL) AND (EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text))))) OR (EXISTS ( SELECT 1 FROM public.groups WHERE ((groups.id = group_plan_ideas.group_id) AND (groups.visibility = ANY (ARRAY['public'::text, 'shared_with_link'::text])))))));
CREATE POLICY "Everyone can view popularity metrics" ON public.item_popularity_metrics FOR SELECT USING (true);
CREATE POLICY "Everyone can view preference weights" ON public.preference_weights FOR SELECT USING (true);
CREATE POLICY "Everyone can view published templates" ON public.form_templates FOR SELECT USING ((is_published = true));
CREATE POLICY "Everyone can view votes" ON public.group_plan_idea_votes FOR SELECT USING (true);
CREATE POLICY "Form creators can delete their forms" ON public.forms FOR DELETE USING ((auth.uid() = created_by));
CREATE POLICY "Form creators can update their forms" ON public.forms FOR UPDATE USING ((auth.uid() = created_by)) WITH CHECK ((auth.uid() = created_by));
CREATE POLICY "Group admins can manage trips" ON public.group_trips TO authenticated USING ((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_trips.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_trips.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text)))));
CREATE POLICY "Group admins can modify any idea" ON public.group_plan_ideas USING ((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = ANY (ARRAY['owner'::text, 'admin'::text])) AND (group_members.status = 'active'::text)))));
CREATE POLICY "Group creator can delete group" ON public.groups FOR DELETE USING (((created_by = auth.uid()) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Group creator can update group" ON public.groups FOR UPDATE USING (((created_by = auth.uid()) AND (auth.role() = 'authenticated'::text)));
CREATE POLICY "Group members and creators can read group" ON public.groups FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = groups.id) AND (((group_members.user_id = auth.uid()) AND (auth.role() = 'authenticated'::text)) OR (group_members.guest_token = ((current_setting('request.jwt.claims'::text, true))::json ->> 'guest_token'::text)))))) OR ((created_by = auth.uid()) AND (auth.role() = 'authenticated'::text))));
CREATE POLICY "Group members can create ideas" ON public.group_plan_ideas FOR INSERT WITH CHECK (((auth.uid() IS NOT NULL) AND (EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text))))));
CREATE POLICY "Group members can read their own membership" ON public.group_members FOR SELECT USING ((((user_id = auth.uid()) AND (auth.role() = 'authenticated'::text)) OR (guest_token = ((current_setting('request.jwt.claims'::text, true))::json ->> 'guest_token'::text))));
CREATE POLICY "Group members can view activities" ON public.group_activities FOR SELECT TO authenticated USING ((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_activities.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text)))));
CREATE POLICY "Group members can view group trips" ON public.group_trips FOR SELECT TO authenticated USING ((EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_trips.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.status = 'active'::text)))));
CREATE POLICY "Group plan idea comments are viewable by group members or guest" ON public.group_plan_idea_comments FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.group_plan_ideas gi WHERE ((gi.id = group_plan_idea_comments.idea_id) AND public.is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea comments can be created by group members or gue" ON public.group_plan_idea_comments FOR INSERT WITH CHECK (((EXISTS ( SELECT 1 FROM public.group_plan_ideas gi WHERE ((gi.id = group_plan_idea_comments.idea_id) AND public.is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea comments can be deleted by creators, group owne" ON public.group_plan_idea_comments FOR DELETE USING (((user_id = auth.uid()) OR (EXISTS ( SELECT 1 FROM ((public.group_plan_ideas gi JOIN public.groups g ON ((gi.group_id = g.id))) JOIN public.group_members gm ON ((g.id = gm.group_id))) WHERE ((gi.id = group_plan_idea_comments.idea_id) AND (gm.user_id = auth.uid()) AND (gm.role = 'owner'::text)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea comments can be updated by creators or guests w" ON public.group_plan_idea_comments FOR UPDATE USING (((user_id = auth.uid()) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea reactions are viewable by group members or gues" ON public.group_plan_idea_reactions FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.group_plan_ideas gi WHERE ((gi.id = group_plan_idea_reactions.idea_id) AND public.is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea reactions can be created by group members or gu" ON public.group_plan_idea_reactions FOR INSERT WITH CHECK (((EXISTS ( SELECT 1 FROM public.group_plan_ideas gi WHERE ((gi.id = group_plan_idea_reactions.idea_id) AND public.is_group_member(gi.group_id)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea reactions can be deleted by creators or guests " ON public.group_plan_idea_reactions FOR DELETE USING (((user_id = auth.uid()) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan idea reactions can be updated by creators or guests " ON public.group_plan_idea_reactions FOR UPDATE USING (((user_id = auth.uid()) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan ideas are viewable by group members or guests with t" ON public.group_plan_ideas FOR SELECT USING ((public.is_group_member(group_id) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan ideas can be created by group members or guests with" ON public.group_plan_ideas FOR INSERT WITH CHECK ((public.is_group_member(group_id) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan ideas can be deleted by creators, group owners, or g" ON public.group_plan_ideas FOR DELETE USING (((created_by = auth.uid()) OR (EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = 'owner'::text)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Group plan ideas can be updated by creators, group owners, or g" ON public.group_plan_ideas FOR UPDATE USING (((created_by = auth.uid()) OR (EXISTS ( SELECT 1 FROM public.group_members WHERE ((group_members.group_id = group_plan_ideas.group_id) AND (group_members.user_id = auth.uid()) AND (group_members.role = 'owner'::text)))) OR ((guest_token IS NOT NULL) AND (guest_token = (current_setting('request.headers.guest_token'::text, true))::uuid))));
CREATE POLICY "Guests can add themselves to groups" ON public.group_guest_members FOR INSERT WITH CHECK ((guest_token = public.get_guest_token()));
CREATE POLICY "Guests can add themselves to trip_members" ON public.trip_members FOR INSERT WITH CHECK ((user_id = auth.uid()));
CREATE POLICY "Guests can create group activities" ON public.group_activities FOR INSERT WITH CHECK (((guest_token = public.get_guest_token()) AND public.guest_has_group_access(group_id)));
CREATE POLICY "Guests can create group plans" ON public.group_plans FOR INSERT WITH CHECK (((guest_token = public.get_guest_token()) AND public.guest_has_group_access(group_id)));
CREATE POLICY "Guests can create idea comments" ON public.group_plan_idea_comments FOR INSERT WITH CHECK (((guest_token = public.get_guest_token()) AND (EXISTS ( SELECT 1 FROM public.group_plan_ideas WHERE ((group_plan_ideas.id = group_plan_idea_comments.idea_id) AND public.guest_has_group_access(group_plan_ideas.group_id))))));
CREATE POLICY "Guests can create idea reactions" ON public.group_plan_idea_reactions FOR INSERT WITH CHECK (((guest_token = public.get_guest_token()) AND (EXISTS ( SELECT 1 FROM public.group_plan_ideas WHERE ((group_plan_ideas.id = group_plan_idea_reactions.idea_id) AND public.guest_has_group_access(group_plan_ideas.group_id))))));
CREATE POLICY "Guests can create idea votes" ON public.group_plan_idea_votes FOR INSERT WITH CHECK (((guest_token = public.get_guest_token()) AND (EXISTS ( SELECT 1 FROM public.group_plan_ideas WHERE ((group_plan_ideas.id = group_plan_idea_votes.idea_id) AND public.guest_has_group_access(group_plan_ideas.group_id))))));
CREATE POLICY "Guests can create trips" ON public.trips FOR INSERT WITH CHECK ((created_by = auth.uid()));
CREATE POLICY "Guests can insert trips" ON public.trips FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM public.guest_tokens WHERE ((guest_tokens.trip_id = guest_tokens.id) AND (guest_tokens.token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text))))));
CREATE POLICY "Guests can manage their own comments" ON public.group_plan_idea_comments USING ((guest_token = public.get_guest_token()));
CREATE POLICY "Guests can manage their own plans" ON public.group_plans USING ((guest_token = public.get_guest_token()));
CREATE POLICY "Guests can manage their own reactions" ON public.group_plan_idea_reactions USING ((guest_token = public.get_guest_token()));
CREATE POLICY "Guests can manage their own votes" ON public.group_plan_idea_votes USING ((guest_token = public.get_guest_token()));
CREATE POLICY "Guests can modify itinerary items via guest_token" ON public.itinerary_items USING (public.guest_has_trip_access(trip_id)) WITH CHECK (public.guest_has_trip_access(trip_id));
CREATE POLICY "Guests can modify trip members via guest_token" ON public.trip_members USING (public.guest_has_trip_access(trip_id)) WITH CHECK (public.guest_has_trip_access(trip_id));
CREATE POLICY "Guests can select trips by guest token" ON public.trips FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.guest_tokens WHERE ((guest_tokens.trip_id = guest_tokens.id) AND (guest_tokens.token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text))))));
CREATE POLICY "Guests can update their trips via guest_token" ON public.trips FOR UPDATE USING (public.guest_has_trip_access(id)) WITH CHECK (public.guest_has_trip_access(id));
CREATE POLICY "Guests can update trips by guest token" ON public.trips FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.guest_tokens WHERE ((guest_tokens.trip_id = guest_tokens.id) AND (guest_tokens.token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text)))))) WITH CHECK ((EXISTS ( SELECT 1 FROM public.guest_tokens WHERE ((guest_tokens.trip_id = guest_tokens.id) AND (guest_tokens.token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text))))));
CREATE POLICY "Guests can view group activities" ON public.group_activities FOR SELECT USING (((guest_token = public.get_guest_token()) OR public.guest_has_group_access(group_id)));
CREATE POLICY "Guests can view group plans" ON public.group_plans FOR SELECT USING (((guest_token = public.get_guest_token()) OR public.guest_has_group_access(group_id)));
CREATE POLICY "Guests can view idea comments" ON public.group_plan_idea_comments FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.group_plan_ideas WHERE ((group_plan_ideas.id = group_plan_idea_comments.idea_id) AND public.guest_has_group_access(group_plan_ideas.group_id)))));
CREATE POLICY "Guests can view idea reactions" ON public.group_plan_idea_reactions FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.group_plan_ideas WHERE ((group_plan_ideas.id = group_plan_idea_reactions.idea_id) AND public.guest_has_group_access(group_plan_ideas.group_id)))));
CREATE POLICY "Guests can view idea votes" ON public.group_plan_idea_votes FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.group_plan_ideas WHERE ((group_plan_ideas.id = group_plan_idea_votes.idea_id) AND public.guest_has_group_access(group_plan_ideas.group_id)))));
CREATE POLICY "Guests can view itinerary items via guest_token" ON public.itinerary_items FOR SELECT USING (public.guest_has_trip_access(trip_id));
CREATE POLICY "Guests can view their group memberships" ON public.group_guest_members FOR SELECT USING ((guest_token = public.get_guest_token()));
CREATE POLICY "Guests can view their own tokens" ON public.guest_tokens FOR SELECT USING (((token = current_setting('request.headers.guest_token'::text, true)) OR (token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text))));
CREATE POLICY "Guests can view their own trip membership" ON public.trip_members FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.guest_tokens WHERE ((guest_tokens.trip_id = trip_members.trip_id) AND (guest_tokens.token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text))))) OR (user_id = auth.uid())));
CREATE POLICY "Guests can view their own trips" ON public.trips FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.guest_tokens WHERE ((guest_tokens.trip_id = trips.id) AND (guest_tokens.token = ((current_setting('request.headers'::text, true))::json ->> 'cookie_guest_user_id'::text))))) OR (created_by = auth.uid())));
CREATE POLICY "Guests can view their trips via guest_token" ON public.trips FOR SELECT USING (public.guest_has_trip_access(id));
CREATE POLICY "Guests can view trip members via guest_token" ON public.trip_members FOR SELECT USING (public.guest_has_trip_access(trip_id));
CREATE POLICY "Members can remove themselves" ON public.group_members FOR DELETE USING ((((user_id = auth.uid()) AND (auth.role() = 'authenticated'::text)) OR (guest_token = ((current_setting('request.jwt.claims'::text, true))::json ->> 'guest_token'::text))));
CREATE POLICY "Members can view their own trip memberships" ON public.trip_members FOR SELECT USING ((user_id = auth.uid()));
CREATE POLICY "Only admins can create/update destination tags" ON public.destination_tags TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY "Only admins can manage preference weights" ON public.preference_weights USING ((EXISTS ( SELECT 1 FROM auth.users WHERE ((users.id = auth.uid()) AND ((users.raw_user_meta_data ->> 'is_admin'::text) = 'true'::text)))));
CREATE POLICY "Only system can insert login history" ON public.user_login_history FOR INSERT WITH CHECK (true);
CREATE POLICY "Public can read items of published templates" ON public.itinerary_template_items FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.itinerary_templates t WHERE ((t.id = itinerary_template_items.template_id) AND (t.is_published = true)))));
CREATE POLICY "Public can read published templates" ON public.itinerary_templates FOR SELECT USING ((is_published = true));
CREATE POLICY "Public can read sections of published templates" ON public.itinerary_template_sections FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.itinerary_templates t WHERE ((t.id = itinerary_template_sections.template_id) AND (t.is_published = true)))));
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Public read access to content quality metrics" ON public.content_quality_metrics FOR SELECT USING (true);
CREATE POLICY "Public read access to content slugs" ON public.content_slugs FOR SELECT USING (true);
CREATE POLICY "Public select on destinations" ON public.destinations FOR SELECT USING (true);
CREATE POLICY "Researchers can view records for their studies" ON public.milestone_trigger_history FOR SELECT TO authenticated USING ((auth.uid() IN ( SELECT research_study_admins.user_id FROM public.research_study_admins WHERE (research_study_admins.study_id = milestone_trigger_history.study_id))));
CREATE POLICY "Study owners can manage admins" ON public.research_study_admins USING ((auth.uid() IN ( SELECT research_study_admins_1.user_id FROM public.research_study_admins research_study_admins_1 WHERE ((research_study_admins_1.study_id = research_study_admins_1.study_id) AND (research_study_admins_1.role = 'owner'::text)))));
CREATE POLICY "System can insert activity history" ON public.user_activity_history FOR INSERT WITH CHECK (true);
CREATE POLICY "Tags are viewable by everyone" ON public.tags FOR SELECT USING (true);
CREATE POLICY "Trip admin/editor/creator can update polls" ON public.trip_vote_polls FOR UPDATE USING (((created_by = auth.uid()) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_vote_polls.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY "Trip admins and editors can create focus sessions" ON public.focus_sessions FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = focus_sessions.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Trip admins and editors can manage logistics" ON public.trip_logistics USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_logistics.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Trip admins and editors can update focus sessions" ON public.focus_sessions FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = focus_sessions.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Trip admins and editors can update trip forms" ON public.forms FOR UPDATE USING (((trip_id IS NOT NULL) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))))) WITH CHECK (((trip_id IS NOT NULL) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY "Trip admins can delete trip forms" ON public.forms FOR DELETE USING (((trip_id IS NOT NULL) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role))))));
CREATE POLICY "Trip admins can update access requests" ON public.access_requests FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = access_requests.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role)))));
CREATE POLICY "Trip creator can add members" ON public.trip_members FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = trip_members.trip_id) AND (trips.created_by = auth.uid())))));
CREATE POLICY "Trip members (admin/editor) can delete collaborative notes" ON public.collaborative_notes FOR DELETE USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND ((trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])) OR (auth.uid() = collaborative_notes.created_by))))));
CREATE POLICY "Trip members can add cities" ON public.trip_cities FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_cities.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can add comments" ON public.trip_item_comments FOR INSERT WITH CHECK (((auth.uid() = user_id) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_item_comments.trip_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY "Trip members can create collaborative notes" ON public.collaborative_notes FOR INSERT WITH CHECK (((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid())))) AND (auth.uid() = created_by)));
CREATE POLICY "Trip members can like comments" ON public.trip_comment_likes FOR INSERT WITH CHECK (((auth.uid() = user_id) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_comment_likes.trip_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY "Trip members can update collaborative notes" ON public.collaborative_notes FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view access requests for their trips" ON public.access_requests FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = access_requests.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Trip members can view collaborative notes" ON public.collaborative_notes FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = collaborative_notes.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view comments" ON public.trip_item_comments FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_item_comments.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view focus sessions" ON public.focus_sessions FOR SELECT USING ((trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE (trip_members.user_id = auth.uid()))));
CREATE POLICY "Trip members can view likes" ON public.trip_comment_likes FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_comment_likes.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view logistics" ON public.trip_logistics FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_logistics.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view options" ON public.trip_vote_options FOR SELECT USING ((EXISTS ( SELECT 1 FROM (public.trip_vote_polls JOIN public.trip_members ON ((trip_vote_polls.trip_id = trip_members.trip_id))) WHERE ((trip_vote_options.poll_id = trip_vote_polls.id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view polls" ON public.trip_vote_polls FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_vote_polls.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can view votes" ON public.trip_votes FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_votes.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip members can vote" ON public.trip_votes FOR INSERT WITH CHECK (((auth.uid() = user_id) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_votes.trip_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY "Trip members with edit permissions can create options" ON public.trip_vote_options FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM (public.trip_vote_polls JOIN public.trip_members ON ((trip_vote_polls.trip_id = trip_members.trip_id))) WHERE ((trip_vote_options.poll_id = trip_vote_polls.id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "Trip members with edit permissions can create polls" ON public.trip_vote_polls FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_vote_polls.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))));
CREATE POLICY "User can add themselves to trip_members" ON public.trip_members FOR INSERT WITH CHECK ((user_id = auth.uid()));
CREATE POLICY "Users can create access requests" ON public.access_requests FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can create sharing history for their trips" ON public.content_sharing_history FOR INSERT WITH CHECK ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = content_sharing_history.source_trip_id))));
CREATE POLICY "Users can create tag suggestions" ON public.user_suggested_tags FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can create template applications for their trips" ON public.template_applications FOR INSERT WITH CHECK ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = template_applications.trip_id))));
CREATE POLICY "Users can create template uses for their trips" ON public.trip_template_uses FOR INSERT WITH CHECK ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = trip_template_uses.trip_id))));
CREATE POLICY "Users can create their own customizations" ON public.content_customizations FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can create their own interactions" ON public.user_interactions FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can create their own likes" ON public.likes FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can create validation logs for their trips" ON public.validation_logs FOR INSERT WITH CHECK ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = validation_logs.trip_id))));
CREATE POLICY "Users can delete their own comments" ON public.comments FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Users can delete their own comments" ON public.trip_item_comments FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Users can delete their own likes" ON public.likes FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Users can delete their own notification history" ON public.notification_history FOR DELETE TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY "Users can delete their own reactions" ON public.comment_reactions FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Users can delete their own votes" ON public.trip_votes FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Users can insert and update their feature preferences" ON public.onboarding_preferences TO authenticated USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));
CREATE POLICY "Users can insert and update their tour completions" ON public.onboarding_tour_completions TO authenticated USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));
CREATE POLICY "Users can insert forms they create" ON public.forms FOR INSERT WITH CHECK (((auth.uid() = created_by) AND ((trip_id IS NULL) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role]))))))));
CREATE POLICY "Users can insert reactions if they have access to the trip" ON public.itinerary_item_reactions FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM ((public.itinerary_items item JOIN public.trips ON ((item.trip_id = trips.id))) LEFT JOIN public.trip_members tm ON (((trips.id = tm.trip_id) AND (tm.user_id = auth.uid())))) WHERE ((item.id = itinerary_item_reactions.itinerary_item_id) AND ((trips.created_by = auth.uid()) OR (tm.user_id IS NOT NULL))))));
CREATE POLICY "Users can insert their own comments" ON public.comments FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can insert their own onboarding events" ON public.onboarding_events FOR INSERT TO authenticated WITH CHECK ((user_id = auth.uid()));
CREATE POLICY "Users can insert their own preferences" ON public.onboarding_preferences FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK ((auth.uid() = id));
CREATE POLICY "Users can insert their own reactions" ON public.comment_reactions FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can insert their own tour completions" ON public.onboarding_tour_completions FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can insert trips" ON public.trips FOR INSERT WITH CHECK ((created_by = auth.uid()));
CREATE POLICY "Users can manage their own interests" ON public.user_interests TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can manage their own preferences" ON public.user_preferences USING ((auth.uid() = user_id));
CREATE POLICY "Users can modify their own ideas" ON public.group_plan_ideas FOR UPDATE USING ((created_by = auth.uid())) WITH CHECK ((created_by = auth.uid()));
CREATE POLICY "Users can modify their own votes" ON public.group_plan_idea_votes FOR UPDATE USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));
CREATE POLICY "Users can only delete their own reactions" ON public.itinerary_item_reactions FOR DELETE USING ((user_id = auth.uid()));
CREATE POLICY "Users can read reactions if they have access to the trip" ON public.itinerary_item_reactions FOR SELECT USING ((EXISTS ( SELECT 1 FROM ((public.itinerary_items item JOIN public.trips ON ((item.trip_id = trips.id))) LEFT JOIN public.trip_members tm ON (((trips.id = tm.trip_id) AND (tm.user_id = auth.uid())))) WHERE ((item.id = itinerary_item_reactions.itinerary_item_id) AND ((trips.created_by = auth.uid()) OR (tm.user_id IS NOT NULL) OR (trips.is_public = true))))));
CREATE POLICY "Users can see their own admin roles" ON public.research_study_admins FOR SELECT TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can see their own notification history" ON public.notification_history FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can see their own notification preferences" ON public.notification_preferences FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can see their own notifications" ON public.notifications FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can select their own trips" ON public.trips FOR SELECT USING ((created_by = auth.uid()));
CREATE POLICY "Users can unlike their own likes" ON public.trip_comment_likes FOR DELETE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING ((auth.uid() = id));
CREATE POLICY "Users can update their own comments" ON public.comments FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own comments" ON public.trip_item_comments FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own customizations" ON public.content_customizations FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own interactions" ON public.user_interactions FOR UPDATE TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own notification preferences" ON public.notification_preferences FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own notifications" ON public.notifications FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own preferences" ON public.onboarding_preferences FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING ((auth.uid() = id));
CREATE POLICY "Users can update their own tour completions" ON public.onboarding_tour_completions FOR UPDATE USING ((auth.uid() = user_id));
CREATE POLICY "Users can update their own trips" ON public.trips FOR UPDATE USING ((created_by = auth.uid())) WITH CHECK ((created_by = auth.uid()));
CREATE POLICY "Users can view all profiles" ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can view forms they have access to" ON public.forms FOR SELECT USING (((auth.uid() = created_by) OR (visibility = 'public'::text) OR ((visibility = 'members'::text) AND (trip_id IS NOT NULL) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = forms.trip_id) AND (trip_members.user_id = auth.uid()))))) OR (EXISTS ( SELECT 1 FROM public.form_collaborators WHERE ((form_collaborators.form_id = form_collaborators.id) AND (form_collaborators.user_id = auth.uid()))))));
CREATE POLICY "Users can view public trips" ON public.trips FOR SELECT USING ((privacy_setting = 'public'::public.trip_privacy_setting));
CREATE POLICY "Users can view sharing history for their trips" ON public.content_sharing_history FOR SELECT USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = content_sharing_history.source_trip_id) UNION SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = content_sharing_history.target_trip_id))));
CREATE POLICY "Users can view template applications for their trips" ON public.template_applications FOR SELECT USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = template_applications.trip_id))));
CREATE POLICY "Users can view their feature preferences" ON public.onboarding_preferences FOR SELECT TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY "Users can view their own access requests" ON public.access_requests FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own activity history" ON public.user_activity_history FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own customizations" ON public.content_customizations FOR SELECT USING (((auth.uid() = user_id) OR ((NOT is_private) AND (auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = ( SELECT itinerary_items.trip_id FROM public.itinerary_items WHERE (itinerary_items.id = content_customizations.item_id))))))));
CREATE POLICY "Users can view their own interactions" ON public.user_interactions FOR SELECT TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own interests" ON public.user_interests FOR SELECT TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own likes" ON public.likes FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own login history" ON public.user_login_history FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own notification history" ON public.notification_history FOR SELECT TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY "Users can view their own onboarding events" ON public.onboarding_events FOR SELECT TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY "Users can view their own preferences" ON public.onboarding_preferences FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own preferences" ON public.user_preferences FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own tag suggestions" ON public.user_suggested_tags FOR SELECT TO authenticated USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own tour completions" ON public.onboarding_tour_completions FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own trip template uses" ON public.trip_template_uses FOR SELECT USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = trip_template_uses.trip_id))));
CREATE POLICY "Users can view their tour completions" ON public.onboarding_tour_completions FOR SELECT TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY "Users can view trips they are members of" ON public.trips FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_members.id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Users can view validation logs for their trips" ON public.validation_logs FOR SELECT USING ((auth.uid() IN ( SELECT trip_members.user_id FROM public.trip_members WHERE (trip_members.trip_id = validation_logs.trip_id))));
CREATE POLICY ab_test_variants_delete ON public.ab_test_variants FOR DELETE USING ((( SELECT profiles.role FROM public.profiles WHERE (profiles.id = auth.uid())) = 'admin'::public.user_role));
CREATE POLICY ab_test_variants_insert ON public.ab_test_variants FOR INSERT WITH CHECK ((( SELECT profiles.role FROM public.profiles WHERE (profiles.id = auth.uid())) = 'admin'::public.user_role));
CREATE POLICY ab_test_variants_select ON public.ab_test_variants FOR SELECT USING (true);
CREATE POLICY ab_test_variants_update ON public.ab_test_variants FOR UPDATE USING ((( SELECT profiles.role FROM public.profiles WHERE (profiles.id = auth.uid())) = 'admin'::public.user_role));
CREATE POLICY admin_all_route_survey_triggers ON public.route_survey_triggers TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY admin_milestone_completions_policy ON public.milestone_completions TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_milestone_triggers_policy ON public.milestone_triggers TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_read_route_survey_trigger_history ON public.route_survey_trigger_history FOR SELECT TO authenticated USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));
CREATE POLICY admin_research_events_policy ON public.research_events TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_research_links_policy ON public.research_links TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_research_participants_policy ON public.research_participants TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_research_studies_policy ON public.research_studies TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_research_tasks_policy ON public.research_tasks TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_research_triggers_policy ON public.research_triggers TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_survey_definitions_policy ON public.survey_definitions TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_survey_handoffs_policy ON public.survey_handoffs TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admin_survey_responses_policy ON public.survey_responses TO authenticated USING ((( SELECT profiles.is_admin FROM public.profiles WHERE (profiles.id = auth.uid())) = true));
CREATE POLICY admins_can_update_feedback ON public.feedback FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::public.user_role)))));
CREATE POLICY delete_group_idea_votes ON public.group_plan_idea_votes FOR DELETE USING ((user_id = auth.uid()));
CREATE POLICY delete_own_group_ideas ON public.group_plan_ideas FOR DELETE USING ((created_by = auth.uid()));
CREATE POLICY expenses_delete_policy ON public.expenses FOR DELETE USING (((paid_by = auth.uid()) OR (EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY expenses_insert_policy ON public.expenses FOR INSERT WITH CHECK (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role])))))));
CREATE POLICY expenses_select_policy ON public.expenses FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY expenses_update_policy ON public.expenses FOR UPDATE USING (((paid_by = auth.uid()) OR (EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = expenses.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = expenses.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY image_metadata_insert_policy ON public.image_metadata FOR INSERT WITH CHECK (((auth.role() = 'authenticated'::text) AND (((entity_type = 'user_avatar'::public.image_type) AND (entity_id = auth.uid())) OR ((entity_type = 'trip_cover'::public.image_type) AND (EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = image_metadata.entity_id) AND (trips.created_by = auth.uid()))))) OR ((entity_type = 'template_cover'::public.image_type) AND (EXISTS ( SELECT 1 FROM public.itinerary_templates WHERE ((itinerary_templates.id = image_metadata.entity_id) AND (itinerary_templates.created_by = auth.uid()))))))));
CREATE POLICY image_metadata_select_policy ON public.image_metadata FOR SELECT USING (true);
CREATE POLICY image_metadata_update_policy ON public.image_metadata FOR UPDATE USING (((auth.role() = 'authenticated'::text) AND ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))) OR (((entity_type = 'user_avatar'::public.image_type) AND (entity_id = auth.uid())) OR ((entity_type = 'trip_cover'::public.image_type) AND (EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = image_metadata.entity_id) AND (trips.created_by = auth.uid()))))) OR ((entity_type = 'template_cover'::public.image_type) AND (EXISTS ( SELECT 1 FROM public.itinerary_templates WHERE ((itinerary_templates.id = image_metadata.entity_id) AND (itinerary_templates.created_by = auth.uid())))))))));
CREATE POLICY images_insert_policy ON public.images FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY images_read_policy ON public.images FOR SELECT TO authenticated USING (true);
CREATE POLICY insert_group_ideas ON public.group_plan_ideas FOR INSERT WITH CHECK ((auth.uid() IS NOT NULL));
CREATE POLICY insert_research_event_logs ON public.research_event_logs FOR INSERT TO service_role, anon, authenticated WITH CHECK (true);
CREATE POLICY invitations_delete_policy ON public.invitations FOR DELETE USING (((trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role)))) OR (group_id IN ( SELECT group_members.group_id FROM public.group_members WHERE ((group_members.user_id = auth.uid()) AND (group_members.role = 'admin'::text)))) OR ((type = 'referral'::public.invitation_type) AND (inviter_id = auth.uid()))));
CREATE POLICY invitations_select_policy ON public.invitations FOR SELECT USING (((email = auth.email()) OR (inviter_id = auth.uid()) OR (trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role)))) OR (group_id IN ( SELECT group_members.group_id FROM public.group_members WHERE ((group_members.user_id = auth.uid()) AND (group_members.role = 'admin'::text)))) OR ((auth.role() = 'authenticated'::text) AND (token = current_setting('app.current_token'::text, true)))));
CREATE POLICY invitations_update_policy ON public.invitations FOR UPDATE USING (((token = current_setting('app.current_token'::text, true)) OR (trip_id IN ( SELECT trip_members.trip_id FROM public.trip_members WHERE ((trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role)))) OR (group_id IN ( SELECT group_members.group_id FROM public.group_members WHERE ((group_members.user_id = auth.uid()) AND (group_members.role = 'admin'::text)))) OR ((type = 'referral'::public.invitation_type) AND (inviter_id = auth.uid()))));
CREATE POLICY itinerary_item_votes_delete_policy ON public.itinerary_item_votes FOR DELETE USING ((user_id = auth.uid()));
CREATE POLICY itinerary_item_votes_insert_policy ON public.itinerary_item_votes FOR INSERT WITH CHECK (((user_id = auth.uid()) AND (EXISTS ( SELECT 1 FROM (public.itinerary_items JOIN public.trip_members ON ((itinerary_items.trip_id = trip_members.trip_id))) WHERE ((itinerary_items.id = itinerary_item_votes.itinerary_item_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY itinerary_item_votes_select_policy ON public.itinerary_item_votes FOR SELECT USING (((EXISTS ( SELECT 1 FROM (public.itinerary_items JOIN public.trips ON ((itinerary_items.trip_id = trips.id))) WHERE ((itinerary_items.id = itinerary_item_votes.itinerary_item_id) AND (trips.is_public = true)))) OR (EXISTS ( SELECT 1 FROM (public.itinerary_items JOIN public.trip_members ON ((itinerary_items.trip_id = trip_members.trip_id))) WHERE ((itinerary_items.id = itinerary_item_votes.itinerary_item_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY itinerary_item_votes_update_policy ON public.itinerary_item_votes FOR UPDATE USING ((user_id = auth.uid()));
CREATE POLICY itinerary_sections_delete_policy ON public.itinerary_sections FOR DELETE USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY itinerary_sections_insert_policy ON public.itinerary_sections FOR INSERT WITH CHECK (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role])))))));
CREATE POLICY itinerary_sections_select_policy ON public.itinerary_sections FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.is_public = true)))) OR (EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY itinerary_sections_update_policy ON public.itinerary_sections FOR UPDATE USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = itinerary_sections.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = itinerary_sections.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role])))))));
CREATE POLICY likes_all_service_role_policy ON public.likes USING ((auth.role() = 'service_role'::text));
CREATE POLICY likes_delete_policy ON public.likes FOR DELETE USING ((user_id = auth.uid()));
CREATE POLICY likes_insert_policy ON public.likes FOR INSERT WITH CHECK ((user_id = auth.uid()));
CREATE POLICY likes_select_policy ON public.likes FOR SELECT USING ((user_id = auth.uid()));
CREATE POLICY milestone_completions_insert ON public.milestone_completions FOR INSERT WITH CHECK (true);
CREATE POLICY milestone_completions_insert_policy ON public.milestone_completions FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY milestone_completions_select ON public.milestone_completions FOR SELECT USING (true);
CREATE POLICY milestone_completions_select_policy ON public.milestone_completions FOR SELECT USING ((auth.role() = 'authenticated'::text));
CREATE POLICY notification_analytics_insert_policy ON public.notification_analytics FOR INSERT WITH CHECK ((auth.uid() = user_id));
CREATE POLICY notification_analytics_select_policy ON public.notification_analytics FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY notification_analytics_update_policy ON public.notification_analytics FOR UPDATE USING ((EXISTS ( SELECT 1 FROM public.profiles WHERE ((profiles.id = auth.uid()) AND (profiles.role = 'admin'::public.user_role)))));
CREATE POLICY participant_status_history_insert ON public.participant_status_history FOR INSERT WITH CHECK (true);
CREATE POLICY participant_status_history_select ON public.participant_status_history FOR SELECT USING (true);
CREATE POLICY participant_variants_insert ON public.participant_variants FOR INSERT WITH CHECK (true);
CREATE POLICY participant_variants_select ON public.participant_variants FOR SELECT USING (true);
CREATE POLICY participant_view_own_data_policy ON public.research_participants FOR SELECT TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY participant_view_own_milestone_completions_policy ON public.milestone_completions FOR SELECT TO authenticated USING ((participant_id IN ( SELECT research_participants.id FROM public.research_participants WHERE (research_participants.user_id = auth.uid()))));
CREATE POLICY participant_view_own_survey_handoffs_policy ON public.survey_handoffs FOR SELECT TO authenticated USING ((participant_id IN ( SELECT research_participants.id FROM public.research_participants WHERE (research_participants.user_id = auth.uid()))));
CREATE POLICY participant_view_own_tasks_policy ON public.research_tasks FOR SELECT TO authenticated USING ((study_id IN ( SELECT research_participants.study_id FROM public.research_participants WHERE (research_participants.user_id = auth.uid()))));
CREATE POLICY profiles_read_own ON public.profiles FOR SELECT USING ((auth.uid() = id));
CREATE POLICY profiles_update_own ON public.profiles FOR UPDATE USING ((auth.uid() = id));
CREATE POLICY read_active_route_survey_triggers ON public.route_survey_triggers FOR SELECT TO authenticated USING ((is_active = true));
CREATE POLICY read_group_ideas ON public.group_plan_ideas FOR SELECT USING (true);
CREATE POLICY research_analytics_delete ON public.research_analytics FOR DELETE USING ((( SELECT profiles.role FROM public.profiles WHERE (profiles.id = auth.uid())) = 'admin'::public.user_role));
CREATE POLICY research_analytics_insert ON public.research_analytics FOR INSERT WITH CHECK ((( SELECT profiles.role FROM public.profiles WHERE (profiles.id = auth.uid())) = 'admin'::public.user_role));
CREATE POLICY research_analytics_select ON public.research_analytics FOR SELECT USING (true);
CREATE POLICY research_analytics_update ON public.research_analytics FOR UPDATE USING ((( SELECT profiles.role FROM public.profiles WHERE (profiles.id = auth.uid())) = 'admin'::public.user_role));
CREATE POLICY research_survey_triggers_insert_policy ON public.research_survey_triggers FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY research_survey_triggers_select_policy ON public.research_survey_triggers FOR SELECT USING ((auth.role() = 'authenticated'::text));
CREATE POLICY trip_images_delete_policy ON public.trip_images FOR DELETE USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_images.trip_id) AND (trip_members.user_id = auth.uid()) AND ((trip_members.role = 'admin'::public.trip_role) OR (trip_members.role = 'editor'::public.trip_role))))));
CREATE POLICY trip_images_insert_policy ON public.trip_images FOR INSERT WITH CHECK ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_images.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role <> 'viewer'::public.trip_role)))));
CREATE POLICY trip_images_select_policy ON public.trip_images FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_images.trip_id) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY trip_notes_delete_policy ON public.trip_notes FOR DELETE USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = 'admin'::public.trip_role))))));
CREATE POLICY trip_notes_insert_policy ON public.trip_notes FOR INSERT WITH CHECK (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role])))))));
CREATE POLICY trip_notes_select_policy ON public.trip_notes FOR SELECT USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = trip_notes.trip_id) AND (trips.is_public = true)))) OR (EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()))))));
CREATE POLICY trip_notes_update_policy ON public.trip_notes FOR UPDATE USING (((EXISTS ( SELECT 1 FROM public.trips WHERE ((trips.id = trip_notes.trip_id) AND (trips.created_by = auth.uid())))) OR (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = trip_notes.trip_id) AND (trip_members.user_id = auth.uid()) AND (trip_members.role = ANY (ARRAY['admin'::public.trip_role, 'editor'::public.trip_role, 'contributor'::public.trip_role])))))));
CREATE POLICY update_group_idea_votes ON public.group_plan_idea_votes FOR UPDATE USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));
CREATE POLICY update_own_group_ideas ON public.group_plan_ideas FOR UPDATE USING ((created_by = auth.uid()));
CREATE POLICY user_insert_research_events_policy ON public.research_events FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY user_insert_survey_responses_policy ON public.survey_responses FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY user_read_own_route_survey_trigger_history ON public.route_survey_trigger_history FOR SELECT TO authenticated USING ((user_id = auth.uid()));
CREATE POLICY user_view_milestone_triggers_policy ON public.milestone_triggers FOR SELECT TO authenticated USING ((is_active = true));
CREATE POLICY user_view_research_triggers_policy ON public.research_triggers FOR SELECT TO authenticated USING ((active = true));
CREATE POLICY user_view_survey_definitions_policy ON public.survey_definitions FOR SELECT TO authenticated USING ((is_active = true));
CREATE POLICY user_view_survey_responses_policy ON public.survey_responses FOR SELECT TO authenticated USING (((user_id = auth.uid()) OR (participant_id IN ( SELECT research_participants.id FROM public.research_participants WHERE (research_participants.user_id = auth.uid())))));
CREATE POLICY users_can_create_feedback ON public.feedback FOR INSERT WITH CHECK (true);
CREATE POLICY users_can_read_own_feedback ON public.feedback FOR SELECT USING ((auth.uid() = user_id));
CREATE POLICY "Trip editors and owners can upload trip content" ON storage.objects FOR INSERT WITH CHECK (((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = CASE WHEN (regexp_match(objects.name, '^trip-images/trip-([0-9a-f-]+)-'::text) IS NOT NULL) THEN ((regexp_match(objects.name, '^trip-images/trip-([0-9a-f-]+)-'::text))[1])::uuid ELSE NULL::uuid END) AND (trip_members.user_id = auth.uid()) AND (trip_members.role <> 'viewer'::public.trip_role))))));
CREATE POLICY "Trip members can view trip content" ON storage.objects FOR SELECT USING ((EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = CASE WHEN (regexp_match(objects.name, '^trip-images/trip-([0-9a-f-]+)-'::text) IS NOT NULL) THEN ((regexp_match(objects.name, '^trip-images/trip-([0-9a-f-]+)-'::text))[1])::uuid ELSE NULL::uuid END) AND (trip_members.user_id = auth.uid())))));
CREATE POLICY "Trip owners can delete trip content" ON storage.objects FOR DELETE USING (((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1 FROM public.trip_members WHERE ((trip_members.trip_id = CASE WHEN (regexp_match(objects.name, '^trip-images/trip-([0-9a-f-]+)-'::text) IS NOT NULL) THEN ((regexp_match(objects.name, '^trip-images/trip-([0-9a-f-]+)-'::text))[1])::uuid ELSE NULL::uuid END) AND (trip_members.user_id = auth.uid()) AND ((trip_members.role = 'admin'::public.trip_role) OR (trip_members.role = 'editor'::public.trip_role)))))));

--- TRIGGERS ---
CREATE TRIGGER' , 'CREATE TYPE', 'ALTER TYPE' , 'CREATE RULE' , 'COMMENT' ) -- don't notify in case of CREATE TEMP table or other objects created on pg_temp AND cmd.schema_name is distinct from 'pg_temp' THEN NOTIFY pgrst, 'reload schema';
CREATE TRIGGER update_access_requests_updated_at BEFORE UPDATE ON public.access_requests FOR EACH ROW EXECUTE FUNCTION update_access_requests_updated_at()","CREATE TRIGGER update_budget_items_updated_at BEFORE UPDATE ON public.budget_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER update_collaborative_notes_metadata BEFORE UPDATE ON public.collaborative_notes FOR EACH ROW WHEN ((old.* IS DISTINCT FROM new.*)) EXECUTE FUNCTION update_collaborative_notes_metadata()","CREATE TRIGGER comment_reactions_trigger AFTER INSERT OR DELETE ON public.comment_reactions FOR EACH ROW EXECUTE FUNCTION update_comment_reactions_count()","CREATE TRIGGER comment_replies_trigger AFTER INSERT OR DELETE OR UPDATE ON public.comments FOR EACH ROW EXECUTE FUNCTION update_comment_replies_count()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.destinations FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER focus_session_history AFTER INSERT ON public.focus_sessions FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER after_group_member_change AFTER INSERT OR DELETE OR UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER before_update_group_member BEFORE UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_timestamp()","CREATE TRIGGER group_members_count_delete AFTER DELETE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER group_members_count_insert AFTER INSERT ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER group_members_count_update AFTER UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_count()","CREATE TRIGGER group_members_updated_at BEFORE UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION update_group_member_timestamp()","CREATE TRIGGER set_auth_identifier_group_plan_idea_comments BEFORE INSERT ON public.group_plan_idea_comments FOR EACH ROW EXECUTE FUNCTION set_auth_identifier()","CREATE TRIGGER set_auth_identifier_group_plan_idea_reactions BEFORE INSERT ON public.group_plan_idea_reactions FOR EACH ROW EXECUTE FUNCTION set_auth_identifier()","CREATE TRIGGER after_vote_change AFTER INSERT OR DELETE OR UPDATE ON public.group_plan_idea_votes FOR EACH ROW EXECUTE FUNCTION update_vote_counts()","CREATE TRIGGER before_update_group_idea BEFORE UPDATE ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION update_group_idea_timestamp()","CREATE TRIGGER set_auth_identifier_group_plan_ideas BEFORE INSERT ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION set_auth_identifier()","CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER after_group_trip_change AFTER INSERT OR DELETE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_count()","CREATE TRIGGER before_update_group_trip BEFORE UPDATE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_timestamp()","CREATE TRIGGER group_trips_count_delete AFTER DELETE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_count()","CREATE TRIGGER group_trips_count_insert AFTER INSERT ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_count()","CREATE TRIGGER group_trips_updated_at BEFORE UPDATE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION update_group_trip_timestamp()","CREATE TRIGGER before_insert_group BEFORE INSERT ON public.groups FOR EACH ROW WHEN (((new.slug IS NULL) OR (new.slug = ''::text))) EXECUTE FUNCTION generate_group_slug()","CREATE TRIGGER before_update_group BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION update_group_timestamp()","CREATE TRIGGER groups_generate_slug BEFORE INSERT OR UPDATE OF name ON public.groups FOR EACH ROW EXECUTE FUNCTION generate_group_slug()","CREATE TRIGGER groups_updated_at BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION update_group_timestamp()","CREATE TRIGGER update_image_metadata_updated_at BEFORE UPDATE ON public.image_metadata FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER validate_image_metadata_entity BEFORE INSERT OR UPDATE ON public.image_metadata FOR EACH ROW EXECUTE FUNCTION validate_image_metadata_entity()","CREATE TRIGGER handle_updated_at_itinerary_item_votes BEFORE UPDATE ON public.itinerary_item_votes FOR EACH ROW EXECUTE FUNCTION moddatetime()","CREATE TRIGGER create_quality_metrics AFTER INSERT ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION update_quality_metrics()","CREATE TRIGGER itinerary_item_history AFTER INSERT OR DELETE OR UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER maintain_seo_fields BEFORE INSERT OR UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION update_canonical_url()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER update_likes_updated_at BEFORE UPDATE ON public.likes FOR EACH ROW EXECUTE FUNCTION update_likes_updated_at()","CREATE TRIGGER set_notification_preferences_timestamp BEFORE UPDATE ON public.notification_preferences FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER before_update_onboarding_preferences BEFORE UPDATE ON public.onboarding_preferences FOR EACH ROW EXECUTE FUNCTION update_onboarding_preferences_timestamp()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.survey_definitions FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.survey_responses FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER history_notification_trigger AFTER INSERT ON public.trip_history FOR EACH ROW WHEN ((new.user_id IS NOT NULL)) EXECUTE FUNCTION create_notification_from_history()","CREATE TRIGGER set_updated_at_trip_item_comments BEFORE UPDATE ON public.trip_item_comments FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER trip_comment_history AFTER INSERT OR DELETE OR UPDATE ON public.trip_item_comments FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER set_trip_logistics_updated_at BEFORE UPDATE ON public.trip_logistics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()","CREATE TRIGGER trip_member_history AFTER INSERT OR DELETE OR UPDATE ON public.trip_members FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER update_trip_last_viewed AFTER UPDATE OF last_viewed_at ON public.trip_members FOR EACH ROW WHEN ((old.last_viewed_at IS DISTINCT FROM new.last_viewed_at)) EXECUTE FUNCTION update_trip_last_accessed()","CREATE TRIGGER trip_vote_history AFTER INSERT ON public.trip_votes FOR EACH ROW EXECUTE FUNCTION add_trip_history_entry()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER update_trip_duration BEFORE INSERT OR UPDATE OF start_date, end_date ON public.trips FOR EACH ROW EXECUTE FUNCTION calculate_trip_duration()","CREATE TRIGGER update_trips_timestamp BEFORE UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION update_timestamp()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_events FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER after_user_interaction AFTER INSERT ON public.user_interactions FOR EACH ROW EXECUTE FUNCTION update_profile_from_interaction()","CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_testing_signups FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp()","CREATE TRIGGER trg_decrement_travelers AFTER DELETE ON public.user_travel FOR EACH ROW EXECUTE FUNCTION decrement_travelers_count()","CREATE TRIGGER trg_increment_travelers AFTER INSERT ON public.user_travel FOR EACH ROW EXECUTE FUNCTION increment_travelers_count()"} remote_schema 20230815000000 {"-- Add metadata JSONB column if it doesn't exist (idempotent)\nALTER TABLE itinerary_templates \nADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}'::jsonb","-- Add an index for more efficient querying of metadata fields\nCREATE INDEX IF NOT EXISTS idx_itinerary_templates_metadata\nON itinerary_templates USING gin (metadata)","-- Add a comment to document the purpose of the metadata field\nCOMMENT ON COLUMN itinerary_templates.metadata IS 'Stores additional structured data about the itinerary template, including pace, seasonality, budget, local tips, etc.'"} add_itinerary_template_metadata_index 20240620000000 {"-- Create the auth_modal_analytics table\nCREATE TABLE IF NOT EXISTS auth_modal_analytics (\n id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n event_name TEXT NOT NULL,\n event_data JSONB DEFAULT '{}'::jsonb,\n user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n context TEXT,\n ab_test_variant TEXT,\n timestamp TIMESTAMPTZ NOT NULL DEFAULT now(),\n url TEXT,\n \n -- Add metadata fields that are useful for analytics\n browser TEXT,\n device_type TEXT,\n country TEXT,\n referrer TEXT,\n session_id TEXT\n)","-- Add indexes for querying\nCREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_event_name ON auth_modal_analytics(event_name)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_context ON auth_modal_analytics(context)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_ab_test_variant ON auth_modal_analytics(ab_test_variant)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_timestamp ON auth_modal_analytics(timestamp)","CREATE INDEX IF NOT EXISTS idx_auth_modal_analytics_user_id ON auth_modal_analytics(user_id)","-- Create an RLS policy that allows anyone to insert records\n-- This is needed since we want to track analytics even for non-authenticated users\nALTER TABLE auth_modal_analytics ENABLE ROW LEVEL SECURITY","-- Allow all users to insert analytics data\nCREATE POLICY insert_auth_modal_analytics_policy \n ON auth_modal_analytics \n FOR INSERT \n TO authenticated, anon\n WITH CHECK (true)","-- Only allow admins to select/update/delete analytics data\nCREATE POLICY admin_auth_modal_analytics_policy \n ON auth_modal_analytics \n USING (\n auth.uid() IN (\n SELECT id FROM profiles WHERE role = 'admin'\n )\n )","-- Create a materialized view for faster analytics queries\nCREATE MATERIALIZED VIEW IF NOT EXISTS auth_modal_analytics_summary AS\nSELECT\n date_trunc('day', timestamp) AS day,\n event_name,\n context,\n ab_test_variant,\n COUNT(*) AS event_count\nFROM auth_modal_analytics\nGROUP BY 1, 2, 3, 4\nORDER BY 1 DESC","-- Create a function to refresh the materialized view\nCREATE OR REPLACE FUNCTION refresh_auth_modal_analytics_summary()\nRETURNS TRIGGER AS $$\nBEGIN\n REFRESH MATERIALIZED VIEW CONCURRENTLY auth_modal_analytics_summary;
DROP TRIGGER IF EXISTS refresh_auth_modal_analytics_summary_trigger ON auth_modal_analytics","CREATE TRIGGER refresh_auth_modal_analytics_summary_trigger\nAFTER INSERT OR UPDATE OR DELETE OR TRUNCATE\nON auth_modal_analytics\nFOR EACH STATEMENT\nEXECUTE FUNCTION refresh_auth_modal_analytics_summary()"} auth_modal_analytics 20230521 {"-- Add guest_token column if it doesn't exist (some old code may still use this)\nDO $$ \nBEGIN\n IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'group_plans' AND column_name = 'guest_token') THEN\n ALTER TABLE public.group_plans ADD COLUMN guest_token uuid REFERENCES public.guest_tokens(id);
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
CREATE TRIGGER sync_user_profile AFTER INSERT OR UPDATE ON auth.users FOR EACH ROW EXECUTE FUNCTION public.sync_user_to_profile();
CREATE TRIGGER after_group_member_change AFTER INSERT OR DELETE OR UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();
CREATE TRIGGER after_group_trip_change AFTER INSERT OR DELETE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION public.update_group_trip_count();
CREATE TRIGGER after_user_interaction AFTER INSERT ON public.user_interactions FOR EACH ROW EXECUTE FUNCTION public.update_profile_from_interaction();
CREATE TRIGGER after_vote_change AFTER INSERT OR DELETE OR UPDATE ON public.group_plan_idea_votes FOR EACH ROW EXECUTE FUNCTION public.update_vote_counts();
CREATE TRIGGER before_insert_group BEFORE INSERT ON public.groups FOR EACH ROW WHEN (((new.slug IS NULL) OR (new.slug = ''::text))) EXECUTE FUNCTION public.generate_group_slug();
CREATE TRIGGER before_update_group BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION public.update_group_timestamp();
CREATE TRIGGER before_update_group_idea BEFORE UPDATE ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION public.update_group_idea_timestamp();
CREATE TRIGGER before_update_group_member BEFORE UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION public.update_group_member_timestamp();
CREATE TRIGGER before_update_group_trip BEFORE UPDATE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION public.update_group_trip_timestamp();
CREATE TRIGGER before_update_onboarding_preferences BEFORE UPDATE ON public.onboarding_preferences FOR EACH ROW EXECUTE FUNCTION public.update_onboarding_preferences_timestamp();
CREATE TRIGGER check_itinerary_milestone_trigger AFTER INSERT ON public.research_events FOR EACH ROW EXECUTE FUNCTION public.check_itinerary_milestone();
CREATE TRIGGER check_template_item_relationship BEFORE INSERT OR UPDATE ON public.itinerary_template_items FOR EACH ROW EXECUTE FUNCTION public.check_template_relationship();
CREATE TRIGGER check_template_section_relationship BEFORE INSERT OR UPDATE ON public.itinerary_template_sections FOR EACH ROW EXECUTE FUNCTION public.check_template_relationship();
CREATE TRIGGER comment_reactions_trigger AFTER INSERT OR DELETE ON public.comment_reactions FOR EACH ROW EXECUTE FUNCTION public.update_comment_reactions_count();
CREATE TRIGGER comment_replies_trigger AFTER INSERT OR DELETE OR UPDATE ON public.comments FOR EACH ROW EXECUTE FUNCTION public.update_comment_replies_count();
CREATE TRIGGER create_quality_metrics AFTER INSERT ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION public.update_quality_metrics();
CREATE TRIGGER ensure_guest_trip_membership_trigger AFTER INSERT OR UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION public.ensure_guest_trip_membership();
CREATE TRIGGER expire_invitations_trigger AFTER INSERT OR UPDATE ON public.invitations FOR EACH STATEMENT EXECUTE FUNCTION public.expire_old_invitations();
CREATE TRIGGER focus_session_history AFTER INSERT ON public.focus_sessions FOR EACH ROW EXECUTE FUNCTION public.add_trip_history_entry();
CREATE TRIGGER group_members_count_delete AFTER DELETE ON public.group_members FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();
CREATE TRIGGER group_members_count_insert AFTER INSERT ON public.group_members FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();
CREATE TRIGGER group_members_count_update AFTER UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();
CREATE TRIGGER group_members_updated_at BEFORE UPDATE ON public.group_members FOR EACH ROW EXECUTE FUNCTION public.update_group_member_timestamp();
CREATE TRIGGER group_trips_count_delete AFTER DELETE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION public.update_group_trip_count();
CREATE TRIGGER group_trips_count_insert AFTER INSERT ON public.group_trips FOR EACH ROW EXECUTE FUNCTION public.update_group_trip_count();
CREATE TRIGGER group_trips_updated_at BEFORE UPDATE ON public.group_trips FOR EACH ROW EXECUTE FUNCTION public.update_group_trip_timestamp();
CREATE TRIGGER groups_generate_slug BEFORE INSERT OR UPDATE OF name ON public.groups FOR EACH ROW EXECUTE FUNCTION public.generate_group_slug();
CREATE TRIGGER groups_updated_at BEFORE UPDATE ON public.groups FOR EACH ROW EXECUTE FUNCTION public.update_group_timestamp();
CREATE TRIGGER handle_updated_at_itinerary_item_votes BEFORE UPDATE ON public.itinerary_item_votes FOR EACH ROW EXECUTE FUNCTION public.moddatetime();
CREATE TRIGGER history_notification_trigger AFTER INSERT ON public.trip_history FOR EACH ROW WHEN ((new.user_id IS NOT NULL)) EXECUTE FUNCTION public.create_notification_from_history();
CREATE TRIGGER itinerary_item_history AFTER INSERT OR DELETE OR UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION public.add_trip_history_entry();
CREATE TRIGGER likes_changes_trigger AFTER INSERT OR DELETE ON public.likes FOR EACH ROW EXECUTE FUNCTION public.notify_like_changes();
CREATE TRIGGER maintain_seo_fields BEFORE INSERT OR UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION public.update_canonical_url();
CREATE TRIGGER set_auth_identifier_group_plan_idea_comments BEFORE INSERT ON public.group_plan_idea_comments FOR EACH ROW EXECUTE FUNCTION public.set_auth_identifier();
CREATE TRIGGER set_auth_identifier_group_plan_idea_reactions BEFORE INSERT ON public.group_plan_idea_reactions FOR EACH ROW EXECUTE FUNCTION public.set_auth_identifier();
CREATE TRIGGER set_auth_identifier_group_plan_ideas BEFORE INSERT ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION public.set_auth_identifier();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.destinations FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.itinerary_items FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_events FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_timestamp BEFORE UPDATE ON public.user_testing_signups FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER set_trip_logistics_updated_at BEFORE UPDATE ON public.trip_logistics FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.group_plan_ideas FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER set_updated_at_trip_item_comments BEFORE UPDATE ON public.trip_item_comments FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp();
CREATE TRIGGER trg_enforce_friend_order BEFORE INSERT ON public.friends FOR EACH ROW EXECUTE FUNCTION public.enforce_friend_order();
CREATE TRIGGER trigger_update_images_updated_at BEFORE UPDATE ON public.images FOR EACH ROW EXECUTE FUNCTION public.update_images_updated_at();
CREATE TRIGGER trigger_update_route_survey_triggers_updated_at BEFORE UPDATE ON public.route_survey_triggers FOR EACH ROW EXECUTE FUNCTION public.update_route_survey_triggers_updated_at();
CREATE TRIGGER trigger_validate_invitation BEFORE INSERT OR UPDATE ON public.invitations FOR EACH ROW EXECUTE FUNCTION public.validate_invitation();
CREATE TRIGGER trip_comment_history AFTER INSERT OR DELETE OR UPDATE ON public.trip_item_comments FOR EACH ROW EXECUTE FUNCTION public.add_trip_history_entry();
CREATE TRIGGER trip_member_history AFTER INSERT OR DELETE OR UPDATE ON public.trip_members FOR EACH ROW EXECUTE FUNCTION public.add_trip_history_entry();
CREATE TRIGGER trip_vote_history AFTER INSERT ON public.trip_votes FOR EACH ROW EXECUTE FUNCTION public.add_trip_history_entry();
CREATE TRIGGER update_access_requests_updated_at BEFORE UPDATE ON public.access_requests FOR EACH ROW EXECUTE FUNCTION public.update_access_requests_updated_at();
CREATE TRIGGER update_budget_items_updated_at BEFORE UPDATE ON public.budget_items FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_collaborative_notes_metadata BEFORE UPDATE ON public.collaborative_notes FOR EACH ROW WHEN ((old.* IS DISTINCT FROM new.*)) EXECUTE FUNCTION public.update_collaborative_notes_metadata();
CREATE TRIGGER update_idea_vote_counts_on_delete AFTER DELETE ON public.group_plan_idea_votes FOR EACH ROW EXECUTE FUNCTION public.update_group_idea_vote_counts();
CREATE TRIGGER update_idea_vote_counts_on_insert AFTER INSERT ON public.group_plan_idea_votes FOR EACH ROW EXECUTE FUNCTION public.update_group_idea_vote_counts();
CREATE TRIGGER update_idea_vote_counts_on_update AFTER UPDATE ON public.group_plan_idea_votes FOR EACH ROW WHEN ((old.vote_type IS DISTINCT FROM new.vote_type)) EXECUTE FUNCTION public.update_group_idea_vote_counts();
CREATE TRIGGER update_image_metadata_updated_at BEFORE UPDATE ON public.image_metadata FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_likes_updated_at BEFORE UPDATE ON public.likes FOR EACH ROW EXECUTE FUNCTION public.update_likes_updated_at();
CREATE TRIGGER update_milestone_triggers_timestamp BEFORE UPDATE ON public.milestone_triggers FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER update_referral_stats_trigger AFTER INSERT OR UPDATE OF referrer_id ON public.profiles FOR EACH ROW EXECUTE FUNCTION public.update_referral_stats();
CREATE TRIGGER update_research_participants_timestamp BEFORE UPDATE ON public.research_participants FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER update_research_studies_timestamp BEFORE UPDATE ON public.research_studies FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER update_research_survey_triggers_timestamp BEFORE UPDATE ON public.research_survey_triggers FOR EACH ROW EXECUTE FUNCTION public.update_research_survey_triggers_updated_at();
CREATE TRIGGER update_research_tasks_timestamp BEFORE UPDATE ON public.research_tasks FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER update_research_triggers_timestamp BEFORE UPDATE ON public.research_triggers FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER update_survey_definitions_timestamp BEFORE UPDATE ON public.survey_definitions FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER update_trip_duration BEFORE INSERT OR UPDATE OF start_date, end_date ON public.trips FOR EACH ROW EXECUTE FUNCTION public.calculate_trip_duration();
CREATE TRIGGER update_trip_last_viewed AFTER UPDATE OF last_viewed_at ON public.trip_members FOR EACH ROW WHEN ((old.last_viewed_at IS DISTINCT FROM new.last_viewed_at)) EXECUTE FUNCTION public.update_trip_last_accessed();
CREATE TRIGGER update_trips_timestamp BEFORE UPDATE ON public.trips FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();
CREATE TRIGGER validate_image_metadata_entity BEFORE INSERT OR UPDATE ON public.image_metadata FOR EACH ROW EXECUTE FUNCTION public.validate_image_metadata_entity();
CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();
CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();
