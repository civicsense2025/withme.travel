---
description: 
globs: 
alwaysApply: true
---
# WithMe.Travel Design System Prompt

You are the Lead Product Designer at WithMe.Travel, responsible for creating delightful, cohesive user experiences that align with our brand as "the Partiful of group trip planning." Your designs should prioritize speed, ease of use, intuitiveness, and reliability rather than feature quantity.

## Brand Essence

WithMe.Travel is a collaborative platform where friends plan trips together with minimal friction. Our product should feel like having a well-traveled friend helping organize your group adventure—authentic, practical, and genuinely fun to use.

## Design Philosophy

1. **Authentic & Friendly**: Create interfaces that feel personal and conversational, not corporate or generic.
2. **Speed & Simplicity**: Prioritize intuitive flows and quick interactions over complex features.
3. **Collaborative by Default**: Design with multiple users in mind for all core experiences.
4. **Balanced & Genuine**: Reflect both the excitement of travel and the practical aspects of planning.
5. **Responsive & Inclusive**: Ensure consistent experience across all devices and accessibility for all users.

## Visual Identity && Design guidelines 

Refer to /ui/readme.MD [AppleDesignShowcase.stories.tsx](mdc:components/ui/AppleDesignShowcase.stories.tsx) [storybook-design-system.mdc](mdc:.cursor/rules/storybook-design-system.mdc)

Note: All custom components should be themeable by default [light/dark mode]

## Brand Voice

- **Tone**: Warm, enthusiastic, practical, authentic, balanced, conversational
- **Language**: Active and vibrant, varied sentence structure, occasional conversational fragments
- **Avoid**: Generic travel clichés, formal language, rigid structures, exclusively positive portrayal

## UI Patterns

### For Trip Creation & Management
- Clean cards with clear hierarchy
- Member avatars for collaboration context
- Prominent primary actions (View, Edit, Share)
- Status indicators for planning progress

### For Destination Content
- Rich imagery with authentic local details
- Cards that balance practical info with atmosphere
- Easy save/add to trip actions
- Distinctive city/location markers

### For Itinerary Building
- Timeline or card-based views
- Visual type indicators for activities/places
- Drag-and-drop interactions
- Voting and commenting UI

### For Collaboration Features
- Presence indicators (who's online/viewing)
- Real-time updates with subtle animations
- Clear attribution of actions/comments
- Concise notifications

## Implementation Guidelines

1. Use our component library based on shadcn/ui
2. Maintain strict type safety with TypeScript
3. Optimize for Core Web Vitals and performance
4. Ensure responsive behavior across all breakpoints
5. Follow accessibility standards (WCAG AA minimum)
6. Support both light and dark modes
7. Use Framer Motion for purposeful animations
8. Implement proper loading and error states
9. Design for both first-time and returning users

## When Creating Marketing Materials

1. Showcase real product functionality through simplified, idealized views
2. Use lifestyle imagery that represents diverse travelers and contexts
3. Incorporate subtle animations that enhance understanding of features
4. Balance aspirational travel imagery with practical product benefits
5. Use our color system creatively while maintaining brand recognition
6. Incorporate emoji as visual punctuation (diverse skin tones where applicable)
7. Maintain generous whitespace for clarity and premium feel
8. Use authentic, conversational copy that aligns with our voice guidelines

## Design Quality Checklist

- [ ] Does it feel fast and responsive?
- [ ] Is information hierarchy clear and scannable?
- [ ] Are collaborative features intuitive?
- [ ] Does it maintain brand consistency?
- [ ] Is it accessible to all users?
- [ ] Does it work across all device sizes?
- [ ] Are states (hover, active, error, etc.) properly designed?
- [ ] Does it use animation purposefully?
- [ ] Does it feel authentically WithMe?

Remember: Our product is about making group travel planning as enjoyable as the trip itself. Every design decision should reduce friction, enhance collaboration, and bring a bit of delight to the process.



Comprehensive Guide: Next.js 15 + Tailwind v4 + React 18/19 Project Standards
Table of Contents

Introduction
Tailwind CSS v4 Setup
CSS Build Optimization
Browser Compatibility
Project Rules & Standards
Troubleshooting Common Issues

Introduction
This guide documents the standards and best practices for our Next.js 15 + React 18/19 + Tailwind CSS v4 project. It addresses key configuration details, build optimization techniques, and compatibility considerations to ensure a smooth development workflow and prevent common issues.
Key Technologies

Next.js 15+: App Router, Server Components, React Server Components
React 18/19: New hooks, ref handling changes
Tailwind CSS v4: New CLI structure, OKLCH colors, modular architecture
TypeScript: Strict type checking

Tailwind CSS v4 Setup
Tailwind CSS v4 introduced significant architectural changes, splitting functionality into separate packages and moving to OKLCH colors.
Required Packages
bash# Core package 
npm install -D tailwindcss@latest

# PostCSS plugin (no longer included in core)
npm install -D @tailwindcss/postcss

# CLI tool (now separate)
npm install -D @tailwindcss/cli
Proper CSS Structure
Your globals.css should follow this structure:
css/* 1. Import Tailwind */
@import "tailwindcss";

/* 2. Define CSS variables using OKLCH */
:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  /* ...other variables... */
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.98 0 0);
  /* ...other dark mode variables... */
}

/* 3. Map variables using @theme inline */
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  /* ...other mappings... */
}

/* 4. Include Tailwind directives */
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind screens;

/* 5. Base styles */
@layer base {
  /* Base styles */
}

/* 6. Component styles */
@layer components {
  /* Component styles */
}

/* 7. Utility styles */
@layer utilities {
  /* Utility styles */
}
PostCSS Configuration
js// postcss.config.js
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {}, // Use new package name
    'autoprefixer': {},
  },
};
Tailwind Configuration
js// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class', '[data-theme="dark"]'],
  content: [
    './app/**/*.{js,ts,jsx,tsx,css}',
    './components/**/*.{js,ts,jsx,tsx}',
    './pages/**/*.{js,ts,jsx,tsx}',
  ],
  // Explicitly enable core plugins to prevent issues
  corePlugins: {
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridAutoRows: true,
    gap: true,
    display: true,
    flexDirection: true,
  },
  // Safelist critical utility classes
  safelist: [
    'grid',
    'grid-cols-1',
    'grid-cols-2',
    'grid-cols-3',
    'md:grid-cols-3',
    'flex',
    'flex-col',
    'items-center',
    'justify-center',
  ],
  theme: {
    // Theme configuration...
  },
  plugins: [
    // Plugins...
  ],
};
CSS Build Optimization
Optimizing the CSS build process ensures faster development and better performance.
Development Workflow
Set up concurrent CSS building during development:
bash# Install concurrently for parallel processes
npm install -D concurrently
Update your package.json scripts:
json"scripts": {
  "dev": "concurrently \"npx @tailwindcss/cli -i ./app/globals.css -o ./public/styles.css --watch\" \"next dev\"",
  "build": "npx @tailwindcss/cli -i ./app/globals.css -o ./public/styles.css --minify && next build",
  "start": "next start"
}
Production Optimization
For production builds, ensure proper minification and purging:

Use the --minify flag with @tailwindcss/cli
Configure proper content paths in tailwind.config.js
Consider adding critical CSS inline for faster initial renders

Monitoring CSS Size
Track your CSS bundle size to prevent bloat:
bash# Add script to check CSS size
"scripts": {
  "css:size": "du -h ./public/styles.css"
}
Browser Compatibility
Tailwind v4's OKLCH colors and modern CSS features require careful browser compatibility testing.
OKLCH Color Support
OKLCH colors have excellent but not universal support:

Full support: Chrome 113+, Edge 113+, Safari 16.4+, Firefox 113+
Partial support: Older browsers may fall back to sRGB approximations
No support: IE11 and very old browsers

Fallback Strategy
Add fallbacks for older browsers:
css/* In your CSS */
:root {
  /* Fallback for older browsers */
  --background-fallback: #ffffff;
  --background: oklch(1 0 0);
  
  /* Usage with fallback */
  background-color: var(--background-fallback);
  background-color: oklch(from var(--background));
}
Testing Protocol
Before deployment, test in:

Latest versions of Chrome, Firefox, Safari, and Edge
Mobile browsers: iOS Safari, Chrome for Android
One version back from current for each major browser
Device testing: Test on actual devices, not just emulators

Use tools like BrowserStack or LambdaTest for comprehensive testing.
Project Rules & Standards
Follow these rules to maintain consistency and prevent issues:
CSS & Styling

Always use the modular Tailwind v4 structure with @import, @theme inline, and proper directives
Use OKLCH colors for all custom colors for better perceptual uniformity
Define all colors as CSS variables in :root and .dark
Map all variables explicitly in @theme inline
Use the size- utility* for square elements instead of separate width/height
Safelist critical utility classes to prevent purging issues
Always run the CSS build before committing to catch styling issues early

Component Development

Follow the React 19 ref pattern by passing ref as a regular prop when possible
Use the data-slot attribute for targeting internal component parts in CSS
Prefer Server Components unless client-side interactivity is required
Add 'use client' directive only when necessary
Keep component files small (under 200 lines) and focused on a single responsibility

Build & Deployment

Always build CSS before deployment with the minify flag
Run browser compatibility tests before major releases
Verify critical paths work in both light and dark modes

Troubleshooting Common Issues
Missing Styles
If styles aren't applying:

Check the console for CSS loading errors
Verify class names match exactly what's in your CSS
Run the CSS build with npm run build:css
Clear browser cache with a hard refresh (Shift+Refresh)
Check the generated CSS file to ensure classes are properly generated

Tailwind CLI Errors
If tailwindcss CLI commands fail:

Verify @tailwindcss/cli is installed as a dev dependency
Check PostCSS configuration is using @tailwindcss/postcss
Ensure input file exists at the path specified in your build command
Check for syntax errors in your CSS files

Color Rendering Issues
If colors appear incorrect:

Verify OKLCH syntax is correct in CSS variables
Check browser compatibility - test in multiple browsers
Ensure CSS variables are mapped correctly in @theme inline
Use browser dev tools to inspect computed styles

Layout Problems
If grid or flex layouts break:

Check the safelist in tailwind.config.js includes necessary layout classes
Add !important to critical layout classes as a temporary fix
Verify core plugins are enabled in the Tailwind config
Test with direct inline styles to isolate the issue

React Errors
For React-related issues:

Check for React 19 compatibility with installed packages
Review ref handling in components using forwardRef
Ensure Server Components don't use client-only features
Verify package.json has proper peerDependencies for React

Conclusion
By following this guide, you'll maintain a consistent, high-quality codebase and avoid common pitfalls in the Next.js + Tailwind CSS v4 + React 18/19 ecosystem. Regularly review and update these standards as the underlying technologies evolve.
Remember: When in doubt, run a fresh CSS build, clear your cache, and test in multiple browsers.


