// External dependencies
import React from 'react';
import type { Meta, StoryObj } from '@storybook/react';

// Internal components
import { Button } from '../button';

// Note: Uncomment the following imports if the 'play' function in AccessibilityTest story is used
// import { within } from '@storybook/testing-library';
// import userEvent from '@storybook/testing-library/user-event';

/**
 * Button component for user interactions.
 */
/*
 * 
 * Buttons allow users to perform actions with a single click.
 */
const meta: Meta<typeof Button> = {
  title: 'UI/Button',
  component: Button,
  parameters: {
    layout: 'centered',
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/...',
    },
    docs: {
      description: {
        component: 'Buttons allow users to trigger actions or events with a single click. They communicate calls to action and allow users to interact with the application.',
      },
    },
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['primary', 'secondary', 'accent', 'outline', 'ghost'],
    },
    size: {
      control: 'select',
      options: ['sm', 'md', 'lg'],
    },
    width: {
      control: 'select',
      options: ['auto', 'full'],
      description: 'The width behavior of the button',
      table: {
        defaultValue: { summary: 'auto' },
      },
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the button is disabled',
      table: {
        defaultValue: { summary: 'false' },
      },
    },
    loading: {
      control: 'boolean',
      description: 'Whether the button is in a loading state',
      table: {
        defaultValue: { summary: 'false' },
      },
    },
    loadingText: {
      control: 'text',
      description: 'Text to display when the button is loading',
    },
    leftIcon: {
      control: { disable: true },
      description: 'Icon to display on the left side of the button text',
    },
    rightIcon: {
      control: { disable: true },
      description: 'Icon to display on the right side of the button text',
    },
    children: {
      control: 'text',
      description: 'The content of the button',
    },
    onClick: {
      action: 'clicked',
      description: 'Function called when the button is clicked',
    },
  },
  args: {
    children: 'Button',
    variant: 'primary',
    size: 'md',
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof Button>;

/**
 * The primary button style is used for primary actions.
 */
export const Primary: Story = {
  args: {
    variant: 'primary',
    children: 'Primary Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Primary buttons should be used for the main action in a form or section.',
      },
    },
  },
};

/**
 * The secondary button style is used for secondary actions.
 */
export const Secondary: Story = {
  args: {
    variant: 'secondary',
    children: 'Secondary Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Secondary buttons are used for actions that are important but not the primary focus.',
      },
    },
  },
};

/**
 * The outline button style is used for less important actions.
 */
export const Outline: Story = {
  args: {
    variant: 'outline',
    children: 'Outline Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Outline buttons are used for less prominent actions, often paired with a solid button.',
      },
    },
  },
};

/**
 * The accent button style is used for highlighting.
 */
export const Accent: Story = {
  args: {
    variant: 'accent',
    children: 'Accent Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Accent buttons are used to highlight special or promotional actions.',
      },
    },
  },
};

/**
 * The ghost button style is used for the least prominent actions.
 */
export const Ghost: Story = {
  args: {
    variant: 'ghost',
    children: 'Ghost Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Ghost buttons are the least prominent and should be used for tertiary actions.',
      },
    },
  },
};

/**
 * Buttons come in different sizes for different contexts.
 */
export const Sizes: Story = {
  render: () => (
    <div className="flex flex-col gap-4">
      <Button size="sm">Small Button</Button>
      <Button size="md">Medium Button</Button>
      <Button size="lg">Large Button</Button>
    </div>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Buttons come in three sizes: small (sm), medium (md), and large (lg).',
      },
    },
  },
};

/**
 * Full width buttons span the entire width of their container.
 */
export const FullWidth: Story = {
  args: {
    width: 'full',
    children: 'Full Width Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Full width buttons span the entire width of their container and are useful for mobile interfaces or when you want to emphasize an action.',
      },
    },
  },
};

/**
 * Buttons can show a loading state to indicate a pending action.
 */
export const Loading: Story = {
  args: {
    loading: true,
    loadingText: 'Loading...',
    children: 'Submit',
  },
  parameters: {
    docs: {
      description: {
        story: 'The loading state can be used to indicate that an action is being processed. The button is automatically disabled when in loading state.',
      },
    },
  },
};

/**
 * Buttons can be disabled to indicate that they are not available.
 */
export const Disabled: Story = {
  args: {
    disabled: true,
    children: 'Disabled Button',
  },
  parameters: {
    docs: {
      description: {
        story: 'Disabled buttons are visually de-emphasized and do not respond to user interactions.',
      },
    },
  },
};

/**
 * Buttons can include icons for visual emphasis.
 */
export const WithIcons: Story = {
  args: {
    leftIcon: <span>ðŸ‘ˆ</span>,
    rightIcon: <span>ðŸ‘‰</span>,
    children: 'Button With Icons',
  },
  parameters: {
    docs: {
      description: {
        story: 'Icons can be added to the left and/or right of button text to provide additional visual cues.',
      },
    },
  },
};

/**
 * Interactive button with state demo.
 */
export const Interactive: Story = {
  render: function Render(args: React.ComponentProps<typeof Button>) {
    const [clicked, setClicked] = React.useState(false);
    
    return (
      <Button 
        {...args}
        variant={clicked ? 'accent' : 'primary'}
        onClick={() => setClicked(!clicked)}
      >
        {clicked ? 'Clicked!' : 'Click me'}
      </Button>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'This example demonstrates how a button can change its appearance based on user interaction.',
      },
    },
  },
};

/**
 * Testing button accessibility with interaction.
 */
export const AccessibilityTest: Story = {
  args: {
    children: 'Accessibility Test',
  },
  /* Commented out due to missing dependencies
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = canvas.getByRole('button', { name: /Accessibility Test/i });
    
    // Test keyboard focus
    button.focus();
    expect(document.activeElement).toBe(button);
    
    // Test click interaction
    await userEvent.click(button);
    
    // Test that button is still accessible after interaction
    expect(button).not.toHaveAttribute('aria-disabled', 'true');
  },
  */
  parameters: {
    a11y: {
      config: {
        rules: [
          { id: 'color-contrast', enabled: true },
          { id: 'button-name', enabled: true },
        ],
      },
    },
    docs: {
      description: {
        story: 'This story runs automated accessibility tests to ensure the button is accessible to all users.',
      },
    },
  },
};

/**
 * Shows how buttons look in dark mode.
 */
export const DarkMode: Story = {
  render: () => (
    <div className="flex flex-col gap-4">
      <Button variant="primary">Primary</Button>
      <Button variant="secondary">Secondary</Button>
      <Button variant="outline">Outline</Button>
      <Button variant="ghost">Ghost</Button>
      <Button variant="accent">Accent</Button>
    </div>
  ),
  parameters: {
    backgrounds: { default: 'dark' },
    docs: {
      description: {
        story: 'Buttons automatically adapt their styling to maintain visibility and contrast in dark mode.',
      },
    },
  },
};
